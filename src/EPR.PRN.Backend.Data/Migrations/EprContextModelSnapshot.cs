// <auto-generated />
using System;
using EPR.PRN.Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EPR.PRN.Backend.Data.Migrations
{
    [DbContext(typeof(EprContext))]
    partial class EprContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Eprn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccreditationNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AccreditationYear")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DecemberWaste")
                        .HasColumnType("bit");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsExport")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssuedByOrg")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IssuerNotes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IssuerReference")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("LastUpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ObligationYear")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrganisationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PackagingProducer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrnNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PrnSignatory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrnSignatoryPosition")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PrnStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessToBeUsed")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProducerAgency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReprocessingSite")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ReprocessorExporterAgency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Signature")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("StatusUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("TonnageValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("PrnNumber")
                        .IsUnique();

                    b.ToTable("Prn");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MaterialCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialCode")
                        .IsUnique();

                    b.ToTable("Material");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaterialCode = "PL",
                            MaterialName = "Plastic"
                        },
                        new
                        {
                            Id = 2,
                            MaterialCode = "WD",
                            MaterialName = "Wood"
                        },
                        new
                        {
                            Id = 3,
                            MaterialCode = "AL",
                            MaterialName = "Aluminium"
                        },
                        new
                        {
                            Id = 4,
                            MaterialCode = "ST",
                            MaterialName = "Steel"
                        },
                        new
                        {
                            Id = 5,
                            MaterialCode = "PC",
                            MaterialName = "Paper"
                        },
                        new
                        {
                            Id = 6,
                            MaterialCode = "GL",
                            MaterialName = "Glass"
                        },
                        new
                        {
                            Id = 7,
                            MaterialCode = "GR",
                            MaterialName = "GlassRemelt"
                        },
                        new
                        {
                            Id = 8,
                            MaterialCode = "FC",
                            MaterialName = "FibreComposite"
                        });
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.ObligationCalculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CalculatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialObligationValue")
                        .HasColumnType("int");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubmitterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SubmitterTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Tonnage")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("SubmitterTypeId");

                    b.ToTable("ObligationCalculations");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.ObligationCalculationOrganisationSubmitterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TypeName")
                        .IsUnique();

                    b.ToTable("ObligationCalculationOrganisationSubmitterType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TypeName = "ComplianceScheme"
                        },
                        new
                        {
                            Id = 2,
                            TypeName = "DirectRegistrant"
                        });
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.PEprNpwdSync", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PRNId")
                        .HasColumnType("int");

                    b.Property<int>("PRNStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PEprNpwdSync");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.PrnMaterialMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NPWDMaterialName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PRNMaterialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PRNMaterialId");

                    b.ToTable("PrnMaterialMapping");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NPWDMaterialName = "Plastic",
                            PRNMaterialId = 1
                        },
                        new
                        {
                            Id = 2,
                            NPWDMaterialName = "Wood",
                            PRNMaterialId = 2
                        },
                        new
                        {
                            Id = 3,
                            NPWDMaterialName = "Wood Composting",
                            PRNMaterialId = 2
                        },
                        new
                        {
                            Id = 4,
                            NPWDMaterialName = "Aluminium",
                            PRNMaterialId = 3
                        },
                        new
                        {
                            Id = 5,
                            NPWDMaterialName = "Steel",
                            PRNMaterialId = 4
                        },
                        new
                        {
                            Id = 6,
                            NPWDMaterialName = "Paper/board",
                            PRNMaterialId = 5
                        },
                        new
                        {
                            Id = 7,
                            NPWDMaterialName = "Paper Composting",
                            PRNMaterialId = 5
                        },
                        new
                        {
                            Id = 8,
                            NPWDMaterialName = "Glass Other",
                            PRNMaterialId = 6
                        },
                        new
                        {
                            Id = 9,
                            NPWDMaterialName = "Glass Re-melt",
                            PRNMaterialId = 7
                        });
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.PrnStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("PrnStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusDescription = "Prn Accepted",
                            StatusName = "ACCEPTED"
                        },
                        new
                        {
                            Id = 2,
                            StatusDescription = "Prn Rejected",
                            StatusName = "REJECTED"
                        },
                        new
                        {
                            Id = 3,
                            StatusDescription = "Prn Cancelled",
                            StatusName = "CANCELLED"
                        },
                        new
                        {
                            Id = 4,
                            StatusDescription = "Prn Awaiting Acceptance",
                            StatusName = "AWAITINGACCEPTANCE"
                        });
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.PrnStatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("CreatedByOrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PrnIdFk")
                        .HasColumnType("int");

                    b.Property<int>("PrnStatusIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrnIdFk");

                    b.ToTable("PrnStatusHistory");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.RecyclingTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MaterialNameRT")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Target")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RecyclingTargets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaterialNameRT = "Paper",
                            Target = 0.75m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 2,
                            MaterialNameRT = "Paper",
                            Target = 0.77m,
                            Year = 2026
                        },
                        new
                        {
                            Id = 3,
                            MaterialNameRT = "Paper",
                            Target = 0.79m,
                            Year = 2027
                        },
                        new
                        {
                            Id = 4,
                            MaterialNameRT = "Paper",
                            Target = 0.81m,
                            Year = 2028
                        },
                        new
                        {
                            Id = 5,
                            MaterialNameRT = "Paper",
                            Target = 0.83m,
                            Year = 2029
                        },
                        new
                        {
                            Id = 6,
                            MaterialNameRT = "Paper",
                            Target = 0.85m,
                            Year = 2030
                        },
                        new
                        {
                            Id = 7,
                            MaterialNameRT = "Glass",
                            Target = 0.74m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 8,
                            MaterialNameRT = "Glass",
                            Target = 0.76m,
                            Year = 2026
                        },
                        new
                        {
                            Id = 9,
                            MaterialNameRT = "Glass",
                            Target = 0.78m,
                            Year = 2027
                        },
                        new
                        {
                            Id = 10,
                            MaterialNameRT = "Glass",
                            Target = 0.8m,
                            Year = 2028
                        },
                        new
                        {
                            Id = 11,
                            MaterialNameRT = "Glass",
                            Target = 0.82m,
                            Year = 2029
                        },
                        new
                        {
                            Id = 12,
                            MaterialNameRT = "Glass",
                            Target = 0.85m,
                            Year = 2030
                        },
                        new
                        {
                            Id = 13,
                            MaterialNameRT = "Aluminium",
                            Target = 0.61m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 14,
                            MaterialNameRT = "Aluminium",
                            Target = 0.62m,
                            Year = 2026
                        },
                        new
                        {
                            Id = 15,
                            MaterialNameRT = "Aluminium",
                            Target = 0.63m,
                            Year = 2027
                        },
                        new
                        {
                            Id = 16,
                            MaterialNameRT = "Aluminium",
                            Target = 0.64m,
                            Year = 2028
                        },
                        new
                        {
                            Id = 17,
                            MaterialNameRT = "Aluminium",
                            Target = 0.65m,
                            Year = 2029
                        },
                        new
                        {
                            Id = 18,
                            MaterialNameRT = "Aluminium",
                            Target = 0.67m,
                            Year = 2030
                        },
                        new
                        {
                            Id = 19,
                            MaterialNameRT = "Steel",
                            Target = 0.8m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 20,
                            MaterialNameRT = "Steel",
                            Target = 0.81m,
                            Year = 2026
                        },
                        new
                        {
                            Id = 21,
                            MaterialNameRT = "Steel",
                            Target = 0.82m,
                            Year = 2027
                        },
                        new
                        {
                            Id = 22,
                            MaterialNameRT = "Steel",
                            Target = 0.83m,
                            Year = 2028
                        },
                        new
                        {
                            Id = 23,
                            MaterialNameRT = "Steel",
                            Target = 0.84m,
                            Year = 2029
                        },
                        new
                        {
                            Id = 24,
                            MaterialNameRT = "Steel",
                            Target = 0.85m,
                            Year = 2030
                        },
                        new
                        {
                            Id = 25,
                            MaterialNameRT = "Plastic",
                            Target = 0.55m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 26,
                            MaterialNameRT = "Plastic",
                            Target = 0.57m,
                            Year = 2026
                        },
                        new
                        {
                            Id = 27,
                            MaterialNameRT = "Plastic",
                            Target = 0.59m,
                            Year = 2027
                        },
                        new
                        {
                            Id = 28,
                            MaterialNameRT = "Plastic",
                            Target = 0.61m,
                            Year = 2028
                        },
                        new
                        {
                            Id = 29,
                            MaterialNameRT = "Plastic",
                            Target = 0.63m,
                            Year = 2029
                        },
                        new
                        {
                            Id = 30,
                            MaterialNameRT = "Plastic",
                            Target = 0.65m,
                            Year = 2030
                        },
                        new
                        {
                            Id = 31,
                            MaterialNameRT = "Wood",
                            Target = 0.45m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 32,
                            MaterialNameRT = "Wood",
                            Target = 0.46m,
                            Year = 2026
                        },
                        new
                        {
                            Id = 33,
                            MaterialNameRT = "Wood",
                            Target = 0.47m,
                            Year = 2027
                        },
                        new
                        {
                            Id = 34,
                            MaterialNameRT = "Wood",
                            Target = 0.48m,
                            Year = 2028
                        },
                        new
                        {
                            Id = 35,
                            MaterialNameRT = "Wood",
                            Target = 0.49m,
                            Year = 2029
                        },
                        new
                        {
                            Id = 36,
                            MaterialNameRT = "Wood",
                            Target = 0.5m,
                            Year = 2030
                        },
                        new
                        {
                            Id = 37,
                            MaterialNameRT = "GlassRemelt",
                            Target = 0.75m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 38,
                            MaterialNameRT = "GlassRemelt",
                            Target = 0.76m,
                            Year = 2026
                        },
                        new
                        {
                            Id = 39,
                            MaterialNameRT = "GlassRemelt",
                            Target = 0.77m,
                            Year = 2027
                        },
                        new
                        {
                            Id = 40,
                            MaterialNameRT = "GlassRemelt",
                            Target = 0.78m,
                            Year = 2028
                        },
                        new
                        {
                            Id = 41,
                            MaterialNameRT = "GlassRemelt",
                            Target = 0.79m,
                            Year = 2029
                        },
                        new
                        {
                            Id = 42,
                            MaterialNameRT = "GlassRemelt",
                            Target = 0.8m,
                            Year = 2030
                        },
                        new
                        {
                            Id = 43,
                            MaterialNameRT = "FibreComposite",
                            Target = 0.75m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 44,
                            MaterialNameRT = "FibreComposite",
                            Target = 0.77m,
                            Year = 2026
                        },
                        new
                        {
                            Id = 45,
                            MaterialNameRT = "FibreComposite",
                            Target = 0.79m,
                            Year = 2027
                        },
                        new
                        {
                            Id = 46,
                            MaterialNameRT = "FibreComposite",
                            Target = 0.81m,
                            Year = 2028
                        },
                        new
                        {
                            Id = 47,
                            MaterialNameRT = "FibreComposite",
                            Target = 0.83m,
                            Year = 2029
                        },
                        new
                        {
                            Id = 48,
                            MaterialNameRT = "FibreComposite",
                            Target = 0.85m,
                            Year = 2030
                        });
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.Accreditation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccreditationStatusId")
                        .HasColumnType("int");

                    b.Property<int>("AccreditationYear")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("BusinessCollectionsNotes")
                        .HasColumnType("varchar(500)");

                    b.Property<decimal?>("BusinessCollectionsPercentage")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("CommunicationsNotes")
                        .HasColumnType("varchar(500)");

                    b.Property<decimal?>("CommunicationsPercentage")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InfrastructureNotes")
                        .HasColumnType("varchar(500)");

                    b.Property<decimal?>("InfrastructurePercentage")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("NewMarketsNotes")
                        .HasColumnType("varchar(500)");

                    b.Property<decimal?>("NewMarketsPercentage")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("NewUsersRecycledPackagingWasteNotes")
                        .HasColumnType("varchar(500)");

                    b.Property<decimal?>("NewUsersRecycledPackagingWastePercentage")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("NotCoveredOtherCategoriesNotes")
                        .HasColumnType("varchar(500)");

                    b.Property<decimal?>("NotCoveredOtherCategoriesPercentage")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("PRNTonnage")
                        .HasColumnType("int");

                    b.Property<string>("RecycledWasteNotes")
                        .HasColumnType("varchar(500)");

                    b.Property<decimal?>("RecycledWastePercentage")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("RegistrationMaterialId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalPercentage")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccreditationStatusId");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("RegistrationMaterialId");

                    b.ToTable("Public.Accreditation");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.AccreditationDeterminationDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccreditationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeterminationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccreditationId");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("Public.AccreditationDeterminationDate");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.AccreditationDulyMade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccreditationId")
                        .HasColumnType("int");

                    b.Property<Guid?>("DulyMadeBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DulyMadeDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("Public.AccreditationDulyMade");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.AccreditationFileUpload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccreditationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateUploaded")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FileUploadStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("FileUploadTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Filename")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AccreditationId");

                    b.HasIndex("FileUploadStatusId");

                    b.HasIndex("FileUploadTypeId");

                    b.ToTable("public.AccreditationFileUpload");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.AccreditationTaskStatusQueryNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QueryNoteId")
                        .HasColumnType("int");

                    b.Property<int>("RegulatorAccreditationTaskStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QueryNoteId");

                    b.HasIndex("RegulatorAccreditationTaskStatusId");

                    b.ToTable("Public.AccreditationTaskStatusQueryNote");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("County")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GridReference")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("NationId")
                        .HasColumnType("int");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TownCity")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.ToTable("Public.Address");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.ApplicantRegistrationTaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<int?>("RegistrationMaterialId")
                        .HasColumnType("int");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.Property<int?>("TaskStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("RegistrationId");

                    b.HasIndex("RegistrationMaterialId");

                    b.HasIndex("TaskId");

                    b.HasIndex("TaskStatusId");

                    b.ToTable("Public.RegistrationTaskStatus");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.ApplicationTaskStatusQueryNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QueryNoteId")
                        .HasColumnType("int");

                    b.Property<int>("RegulatorApplicationTaskStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QueryNoteId");

                    b.HasIndex("RegulatorApplicationTaskStatusId");

                    b.ToTable("Public.ApplicationTaskStatusQueryNote");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.CarrierBrokerDealerPermits", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InstatallationPermitOrPPCNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RegisteredWasteCarrierBrokerDealerFlag")
                        .HasColumnType("bit");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WasteCarrierBrokerDealerRegistration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WasteManagementEnvironmentPermitNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("RegistrationId")
                        .IsUnique();

                    b.ToTable("Public.CarrierBrokerDealerPermits");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.DeterminationDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DeterminateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOverdue")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit");

                    b.Property<int>("RegistrationMaterialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("RegistrationMaterialId")
                        .IsUnique();

                    b.ToTable("Public.DeterminationDate");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.DulyMade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("DulyMadeBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DulyMadeDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RegistrationMaterialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationMaterialId")
                        .IsUnique();

                    b.ToTable("Public.DulyMade");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.InterimOverseasConnections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InterimSiteId")
                        .HasColumnType("int");

                    b.Property<int>("ParentOverseasAddressId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("ParentOverseasAddressId");

                    b.ToTable("Public.InterimOverseasConnections");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.LookupAccreditationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Lookup.AccreditationStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Started"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Submitted"
                        },
                        new
                        {
                            Id = 3,
                            Name = "RegulatorReviewing"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Queried"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Updated"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Granted"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Refused"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Withdrawn"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Suspended"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Cancelled"
                        },
                        new
                        {
                            Id = 11,
                            Name = "ReadyToSubmit"
                        });
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.LookupApplicantRegistrationTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMaterialSpecific")
                        .HasColumnType("bit");

                    b.Property<int>("JourneyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Lookup.Task");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationTypeId = 1,
                            IsMaterialSpecific = false,
                            JourneyTypeId = 1,
                            Name = "SiteAddressAndContactDetails"
                        },
                        new
                        {
                            Id = 2,
                            ApplicationTypeId = 1,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 1,
                            Name = "WasteLicensesPermitsAndExemptions"
                        },
                        new
                        {
                            Id = 3,
                            ApplicationTypeId = 1,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 1,
                            Name = "ReprocessingInputsAndOutputs"
                        },
                        new
                        {
                            Id = 4,
                            ApplicationTypeId = 1,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 1,
                            Name = "SamplingAndInspectionPlan"
                        },
                        new
                        {
                            Id = 5,
                            ApplicationTypeId = 2,
                            IsMaterialSpecific = false,
                            JourneyTypeId = 1,
                            Name = "WasteLicensesPermitsAndExemptions"
                        },
                        new
                        {
                            Id = 6,
                            ApplicationTypeId = 2,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 1,
                            Name = "SamplingAndInspectionPlan"
                        },
                        new
                        {
                            Id = 7,
                            ApplicationTypeId = 2,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 1,
                            Name = "OverseasReprocessingSites"
                        },
                        new
                        {
                            Id = 8,
                            ApplicationTypeId = 2,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 1,
                            Name = "InterimSites"
                        },
                        new
                        {
                            Id = 9,
                            ApplicationTypeId = 1,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 2,
                            Name = "PRNsTonnageAndAuthorityToIssuePRNs"
                        },
                        new
                        {
                            Id = 10,
                            ApplicationTypeId = 1,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 2,
                            Name = "BusinessPlan"
                        },
                        new
                        {
                            Id = 11,
                            ApplicationTypeId = 1,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 2,
                            Name = "AccreditationSamplingAndInspectionPlan"
                        },
                        new
                        {
                            Id = 12,
                            ApplicationTypeId = 2,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 2,
                            Name = "PERNsTonnageAndAuthorityToIssuePERNs"
                        },
                        new
                        {
                            Id = 13,
                            ApplicationTypeId = 2,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 2,
                            Name = "BusinessPlan"
                        },
                        new
                        {
                            Id = 14,
                            ApplicationTypeId = 2,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 2,
                            Name = "AccreditationSamplingAndInspectionPlan"
                        },
                        new
                        {
                            Id = 15,
                            ApplicationTypeId = 2,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 2,
                            Name = "OverseasReprocessingSitesAndEvidenceOfBroadlyEquivalentStandards"
                        },
                        new
                        {
                            Id = 16,
                            ApplicationTypeId = 2,
                            IsMaterialSpecific = false,
                            JourneyTypeId = 1,
                            Name = "WasteCarrierBrokerDealerNumber"
                        });
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.LookupApplicationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Lookup.ApplicationType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Reprocessor"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Exporter"
                        });
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.LookupCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Lookup.Country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryCode = "ad",
                            Name = "Andorra"
                        },
                        new
                        {
                            Id = 2,
                            CountryCode = "ae",
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            Id = 3,
                            CountryCode = "af",
                            Name = "Afghanistan"
                        },
                        new
                        {
                            Id = 4,
                            CountryCode = "ag",
                            Name = "Antigua and Barbuda"
                        },
                        new
                        {
                            Id = 5,
                            CountryCode = "ai",
                            Name = "Anguilla"
                        },
                        new
                        {
                            Id = 6,
                            CountryCode = "al",
                            Name = "Albania"
                        },
                        new
                        {
                            Id = 7,
                            CountryCode = "am",
                            Name = "Armenia"
                        },
                        new
                        {
                            Id = 8,
                            CountryCode = "an",
                            Name = "Netherlands Antilles"
                        },
                        new
                        {
                            Id = 9,
                            CountryCode = "ao",
                            Name = "Angola"
                        },
                        new
                        {
                            Id = 10,
                            CountryCode = "aq",
                            Name = "Antarctica"
                        },
                        new
                        {
                            Id = 11,
                            CountryCode = "ar",
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = 13,
                            CountryCode = "as",
                            Name = "American Samoa"
                        },
                        new
                        {
                            Id = 14,
                            CountryCode = "at",
                            Name = "Austria"
                        },
                        new
                        {
                            Id = 15,
                            CountryCode = "au",
                            Name = "Australia"
                        },
                        new
                        {
                            Id = 16,
                            CountryCode = "aw",
                            Name = "Aruba"
                        },
                        new
                        {
                            Id = 17,
                            CountryCode = "az",
                            Name = "Azerbaidjan"
                        },
                        new
                        {
                            Id = 18,
                            CountryCode = "ba",
                            Name = "Bosnia-Herzegovina"
                        },
                        new
                        {
                            Id = 19,
                            CountryCode = "bb",
                            Name = "Barbados"
                        },
                        new
                        {
                            Id = 20,
                            CountryCode = "bd",
                            Name = "Bangladesh"
                        },
                        new
                        {
                            Id = 21,
                            CountryCode = "be",
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = 22,
                            CountryCode = "bf",
                            Name = "Burkina Faso"
                        },
                        new
                        {
                            Id = 23,
                            CountryCode = "bg",
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 24,
                            CountryCode = "bh",
                            Name = "Bahrain"
                        },
                        new
                        {
                            Id = 25,
                            CountryCode = "bi",
                            Name = "Burundi"
                        },
                        new
                        {
                            Id = 26,
                            CountryCode = "bj",
                            Name = "Benin"
                        },
                        new
                        {
                            Id = 27,
                            CountryCode = "bm",
                            Name = "Bermuda"
                        },
                        new
                        {
                            Id = 28,
                            CountryCode = "bn",
                            Name = "Brunei Darussalam"
                        },
                        new
                        {
                            Id = 29,
                            CountryCode = "bo",
                            Name = "Bolivia"
                        },
                        new
                        {
                            Id = 30,
                            CountryCode = "br",
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = 31,
                            CountryCode = "bs",
                            Name = "Bahamas"
                        },
                        new
                        {
                            Id = 32,
                            CountryCode = "bt",
                            Name = "Bhutan"
                        },
                        new
                        {
                            Id = 33,
                            CountryCode = "bv",
                            Name = "Bouvet Island"
                        },
                        new
                        {
                            Id = 34,
                            CountryCode = "bw",
                            Name = "Botswana"
                        },
                        new
                        {
                            Id = 35,
                            CountryCode = "by",
                            Name = "Belarus"
                        },
                        new
                        {
                            Id = 36,
                            CountryCode = "bz",
                            Name = "Belize"
                        },
                        new
                        {
                            Id = 37,
                            CountryCode = "ca",
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 38,
                            CountryCode = "cc",
                            Name = "Cocos (Keeling) Islands"
                        },
                        new
                        {
                            Id = 39,
                            CountryCode = "cf",
                            Name = "Central African Republic"
                        },
                        new
                        {
                            Id = 40,
                            CountryCode = "cg",
                            Name = "Congo"
                        },
                        new
                        {
                            Id = 41,
                            CountryCode = "ch",
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = 42,
                            CountryCode = "ci",
                            Name = "Ivory Coast (Cote D'Ivoire)"
                        },
                        new
                        {
                            Id = 43,
                            CountryCode = "ck",
                            Name = "Cook Islands"
                        },
                        new
                        {
                            Id = 44,
                            CountryCode = "cl",
                            Name = "Chile"
                        },
                        new
                        {
                            Id = 45,
                            CountryCode = "cm",
                            Name = "Cameroon"
                        },
                        new
                        {
                            Id = 46,
                            CountryCode = "cn",
                            Name = "China"
                        },
                        new
                        {
                            Id = 47,
                            CountryCode = "co",
                            Name = "Colombia"
                        },
                        new
                        {
                            Id = 48,
                            CountryCode = "com",
                            Name = "Commercial"
                        },
                        new
                        {
                            Id = 49,
                            CountryCode = "cr",
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Id = 50,
                            CountryCode = "cs",
                            Name = "Former Czechoslovakia"
                        },
                        new
                        {
                            Id = 51,
                            CountryCode = "cu",
                            Name = "Cuba"
                        },
                        new
                        {
                            Id = 52,
                            CountryCode = "cv",
                            Name = "Cape Verde"
                        },
                        new
                        {
                            Id = 53,
                            CountryCode = "cx",
                            Name = "Christmas Island"
                        },
                        new
                        {
                            Id = 54,
                            CountryCode = "cy",
                            Name = "Cyprus"
                        },
                        new
                        {
                            Id = 55,
                            CountryCode = "cz",
                            Name = "Czech Republic"
                        },
                        new
                        {
                            Id = 56,
                            CountryCode = "de",
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 57,
                            CountryCode = "dj",
                            Name = "Djibouti"
                        },
                        new
                        {
                            Id = 58,
                            CountryCode = "dk",
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = 59,
                            CountryCode = "dm",
                            Name = "Dominica"
                        },
                        new
                        {
                            Id = 60,
                            CountryCode = "do",
                            Name = "Dominican Republic"
                        },
                        new
                        {
                            Id = 61,
                            CountryCode = "dz",
                            Name = "Algeria"
                        },
                        new
                        {
                            Id = 62,
                            CountryCode = "ec",
                            Name = "Ecuador"
                        },
                        new
                        {
                            Id = 64,
                            CountryCode = "ee",
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = 65,
                            CountryCode = "eg",
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = 66,
                            CountryCode = "eh",
                            Name = "Western Sahara"
                        },
                        new
                        {
                            Id = 67,
                            CountryCode = "er",
                            Name = "Eritrea"
                        },
                        new
                        {
                            Id = 68,
                            CountryCode = "es",
                            Name = "Spain"
                        },
                        new
                        {
                            Id = 69,
                            CountryCode = "et",
                            Name = "Ethiopia"
                        },
                        new
                        {
                            Id = 70,
                            CountryCode = "fi",
                            Name = "Finland"
                        },
                        new
                        {
                            Id = 71,
                            CountryCode = "fj",
                            Name = "Fiji"
                        },
                        new
                        {
                            Id = 72,
                            CountryCode = "fk",
                            Name = "Falkland Islands"
                        },
                        new
                        {
                            Id = 73,
                            CountryCode = "fm",
                            Name = "Micronesia"
                        },
                        new
                        {
                            Id = 74,
                            CountryCode = "fo",
                            Name = "Faroe Islands"
                        },
                        new
                        {
                            Id = 75,
                            CountryCode = "fr",
                            Name = "France"
                        },
                        new
                        {
                            Id = 76,
                            CountryCode = "fx",
                            Name = "France (European Territory)"
                        },
                        new
                        {
                            Id = 77,
                            CountryCode = "ga",
                            Name = "Gabon"
                        },
                        new
                        {
                            Id = 79,
                            CountryCode = "gd",
                            Name = "Grenada"
                        },
                        new
                        {
                            Id = 80,
                            CountryCode = "ge",
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = 81,
                            CountryCode = "gf",
                            Name = "French Guyana"
                        },
                        new
                        {
                            Id = 82,
                            CountryCode = "gh",
                            Name = "Ghana"
                        },
                        new
                        {
                            Id = 83,
                            CountryCode = "gi",
                            Name = "Gibraltar"
                        },
                        new
                        {
                            Id = 84,
                            CountryCode = "gl",
                            Name = "Greenland"
                        },
                        new
                        {
                            Id = 85,
                            CountryCode = "gm",
                            Name = "Gambia"
                        },
                        new
                        {
                            Id = 86,
                            CountryCode = "gn",
                            Name = "Guinea"
                        },
                        new
                        {
                            Id = 88,
                            CountryCode = "gp",
                            Name = "Guadeloupe (French)"
                        },
                        new
                        {
                            Id = 89,
                            CountryCode = "gq",
                            Name = "Equatorial Guinea"
                        },
                        new
                        {
                            Id = 90,
                            CountryCode = "gr",
                            Name = "Greece"
                        },
                        new
                        {
                            Id = 91,
                            CountryCode = "gs",
                            Name = "S. Georgia & S. Sandwich Isls."
                        },
                        new
                        {
                            Id = 92,
                            CountryCode = "gt",
                            Name = "Guatemala"
                        },
                        new
                        {
                            Id = 93,
                            CountryCode = "gu",
                            Name = "Guam (USA)"
                        },
                        new
                        {
                            Id = 94,
                            CountryCode = "gw",
                            Name = "Guinea Bissau"
                        },
                        new
                        {
                            Id = 95,
                            CountryCode = "gy",
                            Name = "Guyana"
                        },
                        new
                        {
                            Id = 96,
                            CountryCode = "hk",
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = 97,
                            CountryCode = "hm",
                            Name = "Heard and McDonald Islands"
                        },
                        new
                        {
                            Id = 98,
                            CountryCode = "hn",
                            Name = "Honduras"
                        },
                        new
                        {
                            Id = 99,
                            CountryCode = "hr",
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = 100,
                            CountryCode = "ht",
                            Name = "Haiti"
                        },
                        new
                        {
                            Id = 101,
                            CountryCode = "hu",
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = 102,
                            CountryCode = "id",
                            Name = "Indonesia"
                        },
                        new
                        {
                            Id = 103,
                            CountryCode = "ie",
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = 104,
                            CountryCode = "il",
                            Name = "Israel"
                        },
                        new
                        {
                            Id = 105,
                            CountryCode = "in",
                            Name = "India"
                        },
                        new
                        {
                            Id = 106,
                            CountryCode = "int",
                            Name = "International"
                        },
                        new
                        {
                            Id = 107,
                            CountryCode = "io",
                            Name = "British Indian Ocean Territory"
                        },
                        new
                        {
                            Id = 108,
                            CountryCode = "iq",
                            Name = "Iraq"
                        },
                        new
                        {
                            Id = 109,
                            CountryCode = "ir",
                            Name = "Iran"
                        },
                        new
                        {
                            Id = 110,
                            CountryCode = "is",
                            Name = "Iceland"
                        },
                        new
                        {
                            Id = 111,
                            CountryCode = "it",
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 112,
                            CountryCode = "jm",
                            Name = "Jamaica"
                        },
                        new
                        {
                            Id = 113,
                            CountryCode = "jo",
                            Name = "Jordan"
                        },
                        new
                        {
                            Id = 114,
                            CountryCode = "jp",
                            Name = "Japan"
                        },
                        new
                        {
                            Id = 115,
                            CountryCode = "ke",
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = 116,
                            CountryCode = "kg",
                            Name = "Kyrgyzstan"
                        },
                        new
                        {
                            Id = 117,
                            CountryCode = "kh",
                            Name = "Cambodia"
                        },
                        new
                        {
                            Id = 118,
                            CountryCode = "ki",
                            Name = "Kiribati"
                        },
                        new
                        {
                            Id = 119,
                            CountryCode = "km",
                            Name = "Comoros"
                        },
                        new
                        {
                            Id = 120,
                            CountryCode = "kn",
                            Name = "Saint Kitts & Nevis Anguilla"
                        },
                        new
                        {
                            Id = 121,
                            CountryCode = "kp",
                            Name = "North Korea"
                        },
                        new
                        {
                            Id = 122,
                            CountryCode = "kr",
                            Name = "South Korea"
                        },
                        new
                        {
                            Id = 123,
                            CountryCode = "kw",
                            Name = "Kuwait"
                        },
                        new
                        {
                            Id = 124,
                            CountryCode = "ky",
                            Name = "Cayman Islands"
                        },
                        new
                        {
                            Id = 125,
                            CountryCode = "kz",
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Id = 126,
                            CountryCode = "la",
                            Name = "Laos"
                        },
                        new
                        {
                            Id = 127,
                            CountryCode = "lb",
                            Name = "Lebanon"
                        },
                        new
                        {
                            Id = 128,
                            CountryCode = "lc",
                            Name = "Saint Lucia"
                        },
                        new
                        {
                            Id = 129,
                            CountryCode = "li",
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            Id = 130,
                            CountryCode = "lk",
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            Id = 131,
                            CountryCode = "lr",
                            Name = "Liberia"
                        },
                        new
                        {
                            Id = 132,
                            CountryCode = "ls",
                            Name = "Lesotho"
                        },
                        new
                        {
                            Id = 133,
                            CountryCode = "lt",
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = 134,
                            CountryCode = "lu",
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Id = 135,
                            CountryCode = "lv",
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = 136,
                            CountryCode = "ly",
                            Name = "Libya"
                        },
                        new
                        {
                            Id = 137,
                            CountryCode = "ma",
                            Name = "Morocco"
                        },
                        new
                        {
                            Id = 138,
                            CountryCode = "mc",
                            Name = "Monaco"
                        },
                        new
                        {
                            Id = 139,
                            CountryCode = "md",
                            Name = "Moldavia"
                        },
                        new
                        {
                            Id = 140,
                            CountryCode = "mg",
                            Name = "Madagascar"
                        },
                        new
                        {
                            Id = 141,
                            CountryCode = "mh",
                            Name = "Marshall Islands"
                        },
                        new
                        {
                            Id = 143,
                            CountryCode = "mk",
                            Name = "Macedonia"
                        },
                        new
                        {
                            Id = 144,
                            CountryCode = "ml",
                            Name = "Mali"
                        },
                        new
                        {
                            Id = 145,
                            CountryCode = "mm",
                            Name = "Myanmar"
                        },
                        new
                        {
                            Id = 146,
                            CountryCode = "mn",
                            Name = "Mongolia"
                        },
                        new
                        {
                            Id = 147,
                            CountryCode = "mo",
                            Name = "Macau"
                        },
                        new
                        {
                            Id = 148,
                            CountryCode = "mp",
                            Name = "Northern Mariana Islands"
                        },
                        new
                        {
                            Id = 149,
                            CountryCode = "mq",
                            Name = "Martinique (French)"
                        },
                        new
                        {
                            Id = 150,
                            CountryCode = "mr",
                            Name = "Mauritania"
                        },
                        new
                        {
                            Id = 151,
                            CountryCode = "ms",
                            Name = "Montserrat"
                        },
                        new
                        {
                            Id = 152,
                            CountryCode = "mt",
                            Name = "Malta"
                        },
                        new
                        {
                            Id = 153,
                            CountryCode = "mu",
                            Name = "Mauritius"
                        },
                        new
                        {
                            Id = 154,
                            CountryCode = "mv",
                            Name = "Maldives"
                        },
                        new
                        {
                            Id = 155,
                            CountryCode = "mw",
                            Name = "Malawi"
                        },
                        new
                        {
                            Id = 156,
                            CountryCode = "mx",
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = 157,
                            CountryCode = "my",
                            Name = "Malaysia"
                        },
                        new
                        {
                            Id = 158,
                            CountryCode = "mz",
                            Name = "Mozambique"
                        },
                        new
                        {
                            Id = 159,
                            CountryCode = "na",
                            Name = "Namibia"
                        },
                        new
                        {
                            Id = 161,
                            CountryCode = "nc",
                            Name = "New Caledonia (French)"
                        },
                        new
                        {
                            Id = 162,
                            CountryCode = "ne",
                            Name = "Niger"
                        },
                        new
                        {
                            Id = 163,
                            CountryCode = "net",
                            Name = "Network"
                        },
                        new
                        {
                            Id = 164,
                            CountryCode = "nf",
                            Name = "Norfolk Island"
                        },
                        new
                        {
                            Id = 165,
                            CountryCode = "ng",
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = 166,
                            CountryCode = "ni",
                            Name = "Nicaragua"
                        },
                        new
                        {
                            Id = 167,
                            CountryCode = "nl",
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = 168,
                            CountryCode = "no",
                            Name = "Norway"
                        },
                        new
                        {
                            Id = 169,
                            CountryCode = "np",
                            Name = "Nepal"
                        },
                        new
                        {
                            Id = 170,
                            CountryCode = "nr",
                            Name = "Nauru"
                        },
                        new
                        {
                            Id = 171,
                            CountryCode = "nt",
                            Name = "Neutral Zone"
                        },
                        new
                        {
                            Id = 172,
                            CountryCode = "nu",
                            Name = "Niue"
                        },
                        new
                        {
                            Id = 173,
                            CountryCode = "nz",
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = 174,
                            CountryCode = "om",
                            Name = "Oman"
                        },
                        new
                        {
                            Id = 176,
                            CountryCode = "pa",
                            Name = "Panama"
                        },
                        new
                        {
                            Id = 177,
                            CountryCode = "pe",
                            Name = "Peru"
                        },
                        new
                        {
                            Id = 178,
                            CountryCode = "pf",
                            Name = "Polynesia (French)"
                        },
                        new
                        {
                            Id = 179,
                            CountryCode = "pg",
                            Name = "Papua New Guinea"
                        },
                        new
                        {
                            Id = 180,
                            CountryCode = "ph",
                            Name = "Philippines"
                        },
                        new
                        {
                            Id = 181,
                            CountryCode = "pk",
                            Name = "Pakistan"
                        },
                        new
                        {
                            Id = 182,
                            CountryCode = "pl",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 183,
                            CountryCode = "pm",
                            Name = "Saint Pierre and Miquelon"
                        },
                        new
                        {
                            Id = 184,
                            CountryCode = "pn",
                            Name = "Pitcairn Island"
                        },
                        new
                        {
                            Id = 185,
                            CountryCode = "pr",
                            Name = "Puerto Rico"
                        },
                        new
                        {
                            Id = 186,
                            CountryCode = "pt",
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = 187,
                            CountryCode = "pw",
                            Name = "Palau"
                        },
                        new
                        {
                            Id = 188,
                            CountryCode = "py",
                            Name = "Paraguay"
                        },
                        new
                        {
                            Id = 189,
                            CountryCode = "qa",
                            Name = "Qatar"
                        },
                        new
                        {
                            Id = 190,
                            CountryCode = "re",
                            Name = "Reunion (French)"
                        },
                        new
                        {
                            Id = 191,
                            CountryCode = "ro",
                            Name = "Romania"
                        },
                        new
                        {
                            Id = 192,
                            CountryCode = "ru",
                            Name = "Russian Federation"
                        },
                        new
                        {
                            Id = 193,
                            CountryCode = "rw",
                            Name = "Rwanda"
                        },
                        new
                        {
                            Id = 194,
                            CountryCode = "sa",
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Id = 195,
                            CountryCode = "sb",
                            Name = "Solomon Islands"
                        },
                        new
                        {
                            Id = 196,
                            CountryCode = "sc",
                            Name = "Seychelles"
                        },
                        new
                        {
                            Id = 197,
                            CountryCode = "sd",
                            Name = "Sudan"
                        },
                        new
                        {
                            Id = 198,
                            CountryCode = "se",
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = 199,
                            CountryCode = "sg",
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = 200,
                            CountryCode = "sh",
                            Name = "Saint Helena"
                        },
                        new
                        {
                            Id = 201,
                            CountryCode = "si",
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = 202,
                            CountryCode = "sj",
                            Name = "Svalbard and Jan Mayen Islands"
                        },
                        new
                        {
                            Id = 203,
                            CountryCode = "sk",
                            Name = "Slovak Republic"
                        },
                        new
                        {
                            Id = 204,
                            CountryCode = "sl",
                            Name = "Sierra Leone"
                        },
                        new
                        {
                            Id = 205,
                            CountryCode = "sm",
                            Name = "San Marino"
                        },
                        new
                        {
                            Id = 206,
                            CountryCode = "sn",
                            Name = "Senegal"
                        },
                        new
                        {
                            Id = 207,
                            CountryCode = "so",
                            Name = "Somalia"
                        },
                        new
                        {
                            Id = 208,
                            CountryCode = "sr",
                            Name = "Suriname"
                        },
                        new
                        {
                            Id = 209,
                            CountryCode = "st",
                            Name = "Saint Tome (Sao Tome) and Principe"
                        },
                        new
                        {
                            Id = 210,
                            CountryCode = "su",
                            Name = "Former USSR"
                        },
                        new
                        {
                            Id = 211,
                            CountryCode = "sv",
                            Name = "El Salvador"
                        },
                        new
                        {
                            Id = 212,
                            CountryCode = "sy",
                            Name = "Syria"
                        },
                        new
                        {
                            Id = 213,
                            CountryCode = "sz",
                            Name = "Swaziland"
                        },
                        new
                        {
                            Id = 214,
                            CountryCode = "tc",
                            Name = "Turks and Caicos Islands"
                        },
                        new
                        {
                            Id = 215,
                            CountryCode = "td",
                            Name = "Chad"
                        },
                        new
                        {
                            Id = 216,
                            CountryCode = "tf",
                            Name = "French Southern Territories"
                        },
                        new
                        {
                            Id = 217,
                            CountryCode = "tg",
                            Name = "Togo"
                        },
                        new
                        {
                            Id = 218,
                            CountryCode = "th",
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = 219,
                            CountryCode = "tj",
                            Name = "Tadjikistan"
                        },
                        new
                        {
                            Id = 220,
                            CountryCode = "tk",
                            Name = "Tokelau"
                        },
                        new
                        {
                            Id = 221,
                            CountryCode = "tm",
                            Name = "Turkmenistan"
                        },
                        new
                        {
                            Id = 222,
                            CountryCode = "tn",
                            Name = "Tunisia"
                        },
                        new
                        {
                            Id = 223,
                            CountryCode = "to",
                            Name = "Tonga"
                        },
                        new
                        {
                            Id = 224,
                            CountryCode = "tp",
                            Name = "East Timor"
                        },
                        new
                        {
                            Id = 225,
                            CountryCode = "tr",
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 226,
                            CountryCode = "tt",
                            Name = "Trinidad and Tobago"
                        },
                        new
                        {
                            Id = 227,
                            CountryCode = "tv",
                            Name = "Tuvalu"
                        },
                        new
                        {
                            Id = 228,
                            CountryCode = "tw",
                            Name = "Taiwan"
                        },
                        new
                        {
                            Id = 229,
                            CountryCode = "tz",
                            Name = "Tanzania"
                        },
                        new
                        {
                            Id = 230,
                            CountryCode = "ua",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 231,
                            CountryCode = "ug",
                            Name = "Uganda"
                        },
                        new
                        {
                            Id = 233,
                            CountryCode = "um",
                            Name = "USA Minor Outlying Islands"
                        },
                        new
                        {
                            Id = 234,
                            CountryCode = "us",
                            Name = "United States"
                        },
                        new
                        {
                            Id = 235,
                            CountryCode = "uy",
                            Name = "Uruguay"
                        },
                        new
                        {
                            Id = 236,
                            CountryCode = "uz",
                            Name = "Uzbekistan"
                        },
                        new
                        {
                            Id = 237,
                            CountryCode = "va",
                            Name = "Vatican City State"
                        },
                        new
                        {
                            Id = 238,
                            CountryCode = "vc",
                            Name = "Saint Vincent & Grenadines"
                        },
                        new
                        {
                            Id = 239,
                            CountryCode = "ve",
                            Name = "Venezuela"
                        },
                        new
                        {
                            Id = 240,
                            CountryCode = "vg",
                            Name = "Virgin Islands (British)"
                        },
                        new
                        {
                            Id = 241,
                            CountryCode = "vi",
                            Name = "Virgin Islands (USA)"
                        },
                        new
                        {
                            Id = 242,
                            CountryCode = "vn",
                            Name = "Vietnam"
                        },
                        new
                        {
                            Id = 243,
                            CountryCode = "vu",
                            Name = "Vanuatu"
                        },
                        new
                        {
                            Id = 244,
                            CountryCode = "wf",
                            Name = "Wallis and Futuna Islands"
                        },
                        new
                        {
                            Id = 245,
                            CountryCode = "ws",
                            Name = "Samoa"
                        },
                        new
                        {
                            Id = 246,
                            CountryCode = "ye",
                            Name = "Yemen"
                        },
                        new
                        {
                            Id = 247,
                            CountryCode = "yt",
                            Name = "Mayotte"
                        },
                        new
                        {
                            Id = 248,
                            CountryCode = "yu",
                            Name = "Yugoslavia"
                        },
                        new
                        {
                            Id = 249,
                            CountryCode = "za",
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = 250,
                            CountryCode = "zm",
                            Name = "Zambia"
                        },
                        new
                        {
                            Id = 251,
                            CountryCode = "zr",
                            Name = "Zaire"
                        },
                        new
                        {
                            Id = 252,
                            CountryCode = "zw",
                            Name = "Zimbabwe"
                        });
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.LookupFileUploadStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Lookup.FileUploadStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Virus check failed"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Virus check succeeded"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Upload complete"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Upload failed"
                        },
                        new
                        {
                            Id = 5,
                            Name = "File deleted(Soft delete of record in database – will physically remove from blob storage)"
                        });
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.LookupFileUploadType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Lookup.FileUploadType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SamplingAndInspectionPlan"
                        });
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.LookupJourneyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Lookup.JourneyType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Registration"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Accreditation"
                        });
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.LookupMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MaterialCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Lookup.Material");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaterialCode = "PL",
                            MaterialName = "Plastic"
                        },
                        new
                        {
                            Id = 2,
                            MaterialCode = "ST",
                            MaterialName = "Steel"
                        },
                        new
                        {
                            Id = 3,
                            MaterialCode = "AL",
                            MaterialName = "Aluminium"
                        },
                        new
                        {
                            Id = 4,
                            MaterialCode = "GL",
                            MaterialName = "Glass"
                        },
                        new
                        {
                            Id = 5,
                            MaterialCode = "PA",
                            MaterialName = "Paper/Board"
                        },
                        new
                        {
                            Id = 6,
                            MaterialCode = "WO",
                            MaterialName = "Wood"
                        });
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.LookupMaterialPermit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Lookup.MaterialPermit");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Waste Exemption"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pollution,Prevention and Control(PPC) permit"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Waste Management Licence"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Installation Permit"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Environmental permit or waste management licence"
                        });
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.LookupPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Lookup.Period");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Per Year"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Per Month"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Per Week"
                        });
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.LookupRegistrationMaterialStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Lookup.RegistrationMaterialStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Granted"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Refused"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Started"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Submitted"
                        },
                        new
                        {
                            Id = 5,
                            Name = "RegulatorReviewing"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Queried"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Withdrawn"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Suspended"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Cancelled"
                        },
                        new
                        {
                            Id = 11,
                            Name = "ReadyToSubmit"
                        },
                        new
                        {
                            Id = 12,
                            Name = "InProgress"
                        });
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.LookupRegulatorTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMaterialSpecific")
                        .HasColumnType("bit");

                    b.Property<int>("JourneyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Lookup.RegulatorTask");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationTypeId = 1,
                            IsMaterialSpecific = false,
                            JourneyTypeId = 1,
                            Name = "SiteAddressAndContactDetails"
                        },
                        new
                        {
                            Id = 2,
                            ApplicationTypeId = 1,
                            IsMaterialSpecific = false,
                            JourneyTypeId = 1,
                            Name = "MaterialsAuthorisedOnSite"
                        },
                        new
                        {
                            Id = 3,
                            ApplicationTypeId = 1,
                            IsMaterialSpecific = false,
                            JourneyTypeId = 1,
                            Name = "RegistrationDulyMade"
                        },
                        new
                        {
                            Id = 4,
                            ApplicationTypeId = 1,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 1,
                            Name = "WasteLicensesPermitsAndExemptions"
                        },
                        new
                        {
                            Id = 5,
                            ApplicationTypeId = 1,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 1,
                            Name = "ReprocessingInputsAndOutputs"
                        },
                        new
                        {
                            Id = 6,
                            ApplicationTypeId = 1,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 1,
                            Name = "SamplingAndInspectionPlan"
                        },
                        new
                        {
                            Id = 7,
                            ApplicationTypeId = 1,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 1,
                            Name = "AssignOfficer"
                        },
                        new
                        {
                            Id = 8,
                            ApplicationTypeId = 2,
                            IsMaterialSpecific = false,
                            JourneyTypeId = 1,
                            Name = "BusinessAddress"
                        },
                        new
                        {
                            Id = 9,
                            ApplicationTypeId = 2,
                            IsMaterialSpecific = false,
                            JourneyTypeId = 1,
                            Name = "WasteLicensesPermitsAndExemptions"
                        },
                        new
                        {
                            Id = 10,
                            ApplicationTypeId = 2,
                            IsMaterialSpecific = false,
                            JourneyTypeId = 1,
                            Name = "RegistrationDulyMade"
                        },
                        new
                        {
                            Id = 11,
                            ApplicationTypeId = 2,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 1,
                            Name = "SamplingAndInspectionPlan"
                        },
                        new
                        {
                            Id = 12,
                            ApplicationTypeId = 2,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 1,
                            Name = "AssignOfficer"
                        },
                        new
                        {
                            Id = 13,
                            ApplicationTypeId = 2,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 1,
                            Name = "MaterialDetailsAndContact"
                        },
                        new
                        {
                            Id = 14,
                            ApplicationTypeId = 2,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 1,
                            Name = "OverseasReprocessorAndInterimSiteDetails"
                        },
                        new
                        {
                            Id = 15,
                            ApplicationTypeId = 1,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 1,
                            Name = "CheckRegistrationStatus"
                        },
                        new
                        {
                            Id = 16,
                            ApplicationTypeId = 2,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 1,
                            Name = "CheckRegistrationStatus"
                        },
                        new
                        {
                            Id = 17,
                            ApplicationTypeId = 1,
                            IsMaterialSpecific = false,
                            JourneyTypeId = 2,
                            Name = "AssignOfficer"
                        },
                        new
                        {
                            Id = 18,
                            ApplicationTypeId = 1,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 2,
                            Name = "PRNsTonnageAndAuthorityToIssuePRNs"
                        },
                        new
                        {
                            Id = 19,
                            ApplicationTypeId = 1,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 2,
                            Name = "BusinessPlan"
                        },
                        new
                        {
                            Id = 20,
                            ApplicationTypeId = 1,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 2,
                            Name = "AccreditationSamplingAndInspectionPlan"
                        },
                        new
                        {
                            Id = 22,
                            ApplicationTypeId = 2,
                            IsMaterialSpecific = false,
                            JourneyTypeId = 2,
                            Name = "AssignOfficer"
                        },
                        new
                        {
                            Id = 23,
                            ApplicationTypeId = 2,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 2,
                            Name = "PERNsTonnageAndAuthorityToIssuePERNs"
                        },
                        new
                        {
                            Id = 24,
                            ApplicationTypeId = 2,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 2,
                            Name = "BusinessPlan"
                        },
                        new
                        {
                            Id = 25,
                            ApplicationTypeId = 2,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 2,
                            Name = "AccreditationSamplingAndInspectionPlan"
                        },
                        new
                        {
                            Id = 26,
                            ApplicationTypeId = 2,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 2,
                            Name = "OverseasReprocessingSitesAndEvidenceOfBroadlyEquivalentStandards"
                        },
                        new
                        {
                            Id = 27,
                            ApplicationTypeId = 1,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 2,
                            Name = "DulyMade"
                        },
                        new
                        {
                            Id = 28,
                            ApplicationTypeId = 2,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 2,
                            Name = "DulyMade"
                        },
                        new
                        {
                            Id = 29,
                            ApplicationTypeId = 1,
                            IsMaterialSpecific = false,
                            JourneyTypeId = 1,
                            Name = "WasteCarrierBrokerDealerNumber"
                        },
                        new
                        {
                            Id = 30,
                            ApplicationTypeId = 2,
                            IsMaterialSpecific = true,
                            JourneyTypeId = 1,
                            Name = "InterimSites"
                        });
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.LookupTaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Lookup.TaskStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "NotStarted"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Started"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CannotStartYet"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Queried"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Completed"
                        });
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.MaterialExemptionReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RegistrationMaterialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("RegistrationMaterialId");

                    b.ToTable("Public.MaterialExemptionReference");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Public.Note");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.OverseasAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CityOrTown")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrganisationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<string>("SiteCoordinates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("RegistrationId");

                    b.ToTable("Public.OverseasAddress");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.OverseasAddressContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OverseasAddressId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("OverseasAddressId");

                    b.ToTable("Public.OverseasAddressContact");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.OverseasAddressWasteCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OverseasAddressId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("OverseasAddressId");

                    b.ToTable("Public.OverseasAddressWasteCode");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.OverseasMaterialReprocessingSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OverseasAddressId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationMaterialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("Public.OverseasMaterialReprocessingSite");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AssignedOfficerId")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessAddressId")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("LegalDocumentAddressId")
                        .HasColumnType("int");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RegistrationStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ReprocessingSiteAddressId")
                        .HasColumnType("int");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BusinessAddressId");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("LegalDocumentAddressId");

                    b.HasIndex("ReprocessingSiteAddressId");

                    b.ToTable("Public.Registration");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.RegistrationFileUpload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("DateUploaded")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FileUploadStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("FileUploadTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Filename")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RegistrationMaterialId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FileUploadStatusId");

                    b.HasIndex("FileUploadTypeId");

                    b.HasIndex("RegistrationMaterialId");

                    b.ToTable("public.FileUpload");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.RegistrationMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationReferenceNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnvironmentalPermitWasteManagementNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("EnvironmentalPermitWasteManagementPeriodId")
                        .HasColumnType("int");

                    b.Property<decimal?>("EnvironmentalPermitWasteManagementTonne")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("InstallationPeriodId")
                        .HasColumnType("int");

                    b.Property<string>("InstallationPermitNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("InstallationReprocessingTonne")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsMaterialRegistered")
                        .HasColumnType("bit");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MaximumReprocessingCapacityTonne")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("MaximumReprocessingPeriodId")
                        .HasColumnType("int");

                    b.Property<int?>("PPCPeriodId")
                        .HasColumnType("int");

                    b.Property<string>("PPCPermitNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("PPCReprocessingCapacityTonne")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PermitTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ReasonforNotreg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<Guid?>("StatusUpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StatusUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WasteManagementLicenceNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("WasteManagementPeriodId")
                        .HasColumnType("int");

                    b.Property<decimal?>("WasteManagementReprocessingCapacityTonne")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentalPermitWasteManagementPeriodId");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("InstallationPeriodId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("MaximumReprocessingPeriodId");

                    b.HasIndex("PPCPeriodId");

                    b.HasIndex("PermitTypeId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("StatusId");

                    b.HasIndex("WasteManagementPeriodId");

                    b.ToTable("Public.RegistrationMaterial");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.RegistrationMaterialContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RegistrationMaterialId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("RegistrationMaterialId")
                        .IsUnique();

                    b.ToTable("Public.RegistrationMaterialContact");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.RegistrationReprocessingIO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ContaminantsTonne")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("NonUKPackagingWasteTonne")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NotPackingWasteTonne")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PlantEquipmentUsed")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal>("ProcessLossTonne")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RegistrationMaterialId")
                        .HasColumnType("int");

                    b.Property<bool>("ReprocessingPackagingWasteLastYearFlag")
                        .HasColumnType("bit");

                    b.Property<decimal>("SenttoOtherSiteTonne")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalInputs")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalOutputs")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TypeOfSuppliers")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal>("UKPackagingWasteTonne")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("RegistrationMaterialId");

                    b.ToTable("Public.RegistrationReprocessingIO");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.RegistrationTaskStatusQueryNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QueryNoteId")
                        .HasColumnType("int");

                    b.Property<int>("RegulatorRegistrationTaskStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QueryNoteId");

                    b.HasIndex("RegulatorRegistrationTaskStatusId");

                    b.ToTable("Public.RegistrationTaskStatusQueryNote");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.RegulatorAccreditationRegistrationTaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccreditationYear")
                        .HasColumnType("int");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("RegulatorTaskId")
                        .HasColumnType("int");

                    b.Property<Guid>("StatusCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StatusCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StatusUpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StatusUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaskStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("RegistrationId");

                    b.HasIndex("RegulatorTaskId");

                    b.HasIndex("TaskStatusId");

                    b.ToTable("Public.RegulatorAccreditationRegistrationTaskStatus");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.RegulatorAccreditationTaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccreditationId")
                        .HasColumnType("int");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RegulatorTaskId")
                        .HasColumnType("int");

                    b.Property<Guid>("StatusCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StatusCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StatusUpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StatusUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaskStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccreditationId");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("RegulatorTaskId");

                    b.HasIndex("TaskStatusId");

                    b.ToTable("Public.RegulatorAccreditationTaskStatus");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.RegulatorApplicationTaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RegistrationMaterialId")
                        .HasColumnType("int");

                    b.Property<int>("RegulatorTaskId")
                        .HasColumnType("int");

                    b.Property<Guid>("StatusCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StatusCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StatusUpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StatusUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaskStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("RegistrationMaterialId");

                    b.HasIndex("RegulatorTaskId");

                    b.HasIndex("TaskStatusId");

                    b.ToTable("Public.RegulatorApplicationTaskStatus");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.RegulatorRegistrationTaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("RegulatorTaskId")
                        .HasColumnType("int");

                    b.Property<Guid>("StatusCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StatusCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StatusUpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StatusUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaskStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("RegistrationId");

                    b.HasIndex("RegulatorTaskId");

                    b.HasIndex("TaskStatusId");

                    b.ToTable("Public.RegulatorRegistrationTaskStatus");
                });

            modelBuilder.Entity("OverseasAddressOverseasMaterialReprocessingSite", b =>
                {
                    b.Property<int>("OverseasAddressesId")
                        .HasColumnType("int");

                    b.Property<int>("OverseasMaterialReprocessingSitesId")
                        .HasColumnType("int");

                    b.HasKey("OverseasAddressesId", "OverseasMaterialReprocessingSitesId");

                    b.HasIndex("OverseasMaterialReprocessingSitesId");

                    b.ToTable("OverseasAddressOverseasMaterialReprocessingSite");
                });

            modelBuilder.Entity("OverseasMaterialReprocessingSiteRegistrationMaterial", b =>
                {
                    b.Property<int>("OverseasMaterialReprocessingSitesId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationMaterialsId")
                        .HasColumnType("int");

                    b.HasKey("OverseasMaterialReprocessingSitesId", "RegistrationMaterialsId");

                    b.HasIndex("RegistrationMaterialsId");

                    b.ToTable("OverseasMaterialReprocessingSiteRegistrationMaterial");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.ObligationCalculation", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.ObligationCalculationOrganisationSubmitterType", "ObligationCalculationOrganisationSubmitterType")
                        .WithMany()
                        .HasForeignKey("SubmitterTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("ObligationCalculationOrganisationSubmitterType");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.PrnMaterialMapping", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Material", null)
                        .WithMany("PrnMaterialMappings")
                        .HasForeignKey("PRNMaterialId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.PrnStatusHistory", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Eprn", null)
                        .WithMany("PrnStatusHistories")
                        .HasForeignKey("PrnIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.Accreditation", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.LookupAccreditationStatus", "AccreditationStatus")
                        .WithMany()
                        .HasForeignKey("AccreditationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.RegistrationMaterial", "RegistrationMaterial")
                        .WithMany("Accreditations")
                        .HasForeignKey("RegistrationMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccreditationStatus");

                    b.Navigation("RegistrationMaterial");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.AccreditationDeterminationDate", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.Accreditation", "Accreditation")
                        .WithMany("AccreditationDulyMade")
                        .HasForeignKey("AccreditationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accreditation");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.AccreditationFileUpload", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.Accreditation", "Accreditation")
                        .WithMany("FileUploads")
                        .HasForeignKey("AccreditationId");

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.LookupFileUploadStatus", "FileUploadStatus")
                        .WithMany()
                        .HasForeignKey("FileUploadStatusId");

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.LookupFileUploadType", "FileUploadType")
                        .WithMany()
                        .HasForeignKey("FileUploadTypeId");

                    b.Navigation("Accreditation");

                    b.Navigation("FileUploadStatus");

                    b.Navigation("FileUploadType");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.AccreditationTaskStatusQueryNote", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.Note", "Note")
                        .WithMany()
                        .HasForeignKey("QueryNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.RegulatorAccreditationTaskStatus", "RegulatorAccreditationTaskStatus")
                        .WithMany()
                        .HasForeignKey("RegulatorAccreditationTaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("RegulatorAccreditationTaskStatus");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.ApplicantRegistrationTaskStatus", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.Registration", "Registration")
                        .WithMany("ApplicantRegistrationTasksStatus")
                        .HasForeignKey("RegistrationId");

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.RegistrationMaterial", "RegistrationMaterial")
                        .WithMany("ApplicantTaskStatuses")
                        .HasForeignKey("RegistrationMaterialId");

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.LookupApplicantRegistrationTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId");

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.LookupTaskStatus", "TaskStatus")
                        .WithMany()
                        .HasForeignKey("TaskStatusId");

                    b.Navigation("Registration");

                    b.Navigation("RegistrationMaterial");

                    b.Navigation("Task");

                    b.Navigation("TaskStatus");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.ApplicationTaskStatusQueryNote", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.Note", "Note")
                        .WithMany()
                        .HasForeignKey("QueryNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.RegulatorApplicationTaskStatus", "RegulatorApplicationTaskStatus")
                        .WithMany("ApplicationTaskStatusQueryNotes")
                        .HasForeignKey("RegulatorApplicationTaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("RegulatorApplicationTaskStatus");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.CarrierBrokerDealerPermits", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.Registration", null)
                        .WithOne("CarrierBrokerDealerPermit")
                        .HasForeignKey("EPR.PRN.Backend.Data.DataModels.Registrations.CarrierBrokerDealerPermits", "RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.DeterminationDate", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.RegistrationMaterial", "RegistrationMaterial")
                        .WithOne("DeterminationDate")
                        .HasForeignKey("EPR.PRN.Backend.Data.DataModels.Registrations.DeterminationDate", "RegistrationMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistrationMaterial");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.DulyMade", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.RegistrationMaterial", "RegistrationMaterial")
                        .WithOne("DulyMade")
                        .HasForeignKey("EPR.PRN.Backend.Data.DataModels.Registrations.DulyMade", "RegistrationMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistrationMaterial");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.InterimOverseasConnections", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.OverseasAddress", "OverseasAddress")
                        .WithMany("InterimOverseasConnections")
                        .HasForeignKey("ParentOverseasAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OverseasAddress");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.MaterialExemptionReference", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.RegistrationMaterial", "RegistrationMaterial")
                        .WithMany("MaterialExemptionReferences")
                        .HasForeignKey("RegistrationMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistrationMaterial");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.OverseasAddress", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.LookupCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.Registration", "Registration")
                        .WithMany("OverseasAddresses")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.OverseasAddressContact", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.OverseasAddress", "OverseasAddress")
                        .WithMany("OverseasAddressContacts")
                        .HasForeignKey("OverseasAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OverseasAddress");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.OverseasAddressWasteCode", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.OverseasAddress", "OverseasAddress")
                        .WithMany("OverseasAddressWasteCodes")
                        .HasForeignKey("OverseasAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OverseasAddress");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.Registration", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.Address", "BusinessAddress")
                        .WithMany()
                        .HasForeignKey("BusinessAddressId");

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.Address", "LegalDocumentAddress")
                        .WithMany()
                        .HasForeignKey("LegalDocumentAddressId");

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.Address", "ReprocessingSiteAddress")
                        .WithMany()
                        .HasForeignKey("ReprocessingSiteAddressId");

                    b.Navigation("BusinessAddress");

                    b.Navigation("LegalDocumentAddress");

                    b.Navigation("ReprocessingSiteAddress");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.RegistrationFileUpload", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.LookupFileUploadStatus", "FileUploadStatus")
                        .WithMany()
                        .HasForeignKey("FileUploadStatusId");

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.LookupFileUploadType", "FileUploadType")
                        .WithMany()
                        .HasForeignKey("FileUploadTypeId");

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.RegistrationMaterial", "RegistrationMaterial")
                        .WithMany("FileUploads")
                        .HasForeignKey("RegistrationMaterialId");

                    b.Navigation("FileUploadStatus");

                    b.Navigation("FileUploadType");

                    b.Navigation("RegistrationMaterial");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.RegistrationMaterial", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.LookupPeriod", "EnvironmentalPermitWasteManagementPeriod")
                        .WithMany()
                        .HasForeignKey("EnvironmentalPermitWasteManagementPeriodId");

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.LookupPeriod", "InstallationPeriod")
                        .WithMany()
                        .HasForeignKey("InstallationPeriodId");

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.LookupMaterial", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.LookupPeriod", "MaximumReprocessingPeriod")
                        .WithMany()
                        .HasForeignKey("MaximumReprocessingPeriodId");

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.LookupPeriod", "PPCPeriod")
                        .WithMany()
                        .HasForeignKey("PPCPeriodId");

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.LookupMaterialPermit", "PermitType")
                        .WithMany()
                        .HasForeignKey("PermitTypeId");

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.Registration", "Registration")
                        .WithMany("Materials")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.LookupRegistrationMaterialStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.LookupPeriod", "WasteManagementPeriod")
                        .WithMany()
                        .HasForeignKey("WasteManagementPeriodId");

                    b.Navigation("EnvironmentalPermitWasteManagementPeriod");

                    b.Navigation("InstallationPeriod");

                    b.Navigation("Material");

                    b.Navigation("MaximumReprocessingPeriod");

                    b.Navigation("PPCPeriod");

                    b.Navigation("PermitType");

                    b.Navigation("Registration");

                    b.Navigation("Status");

                    b.Navigation("WasteManagementPeriod");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.RegistrationMaterialContact", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.RegistrationMaterial", null)
                        .WithOne("RegistrationMaterialContact")
                        .HasForeignKey("EPR.PRN.Backend.Data.DataModels.Registrations.RegistrationMaterialContact", "RegistrationMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.RegistrationReprocessingIO", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.RegistrationMaterial", "RegistrationMaterial")
                        .WithMany("RegistrationReprocessingIO")
                        .HasForeignKey("RegistrationMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistrationMaterial");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.RegistrationTaskStatusQueryNote", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.Note", "QueryNote")
                        .WithMany()
                        .HasForeignKey("QueryNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.RegulatorRegistrationTaskStatus", "RegulatorRegistrationTaskStatus")
                        .WithMany("RegistrationTaskStatusQueryNotes")
                        .HasForeignKey("RegulatorRegistrationTaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QueryNote");

                    b.Navigation("RegulatorRegistrationTaskStatus");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.RegulatorAccreditationRegistrationTaskStatus", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.Registration", null)
                        .WithMany("AccreditationTasks")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.LookupRegulatorTask", "Task")
                        .WithMany()
                        .HasForeignKey("RegulatorTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.LookupTaskStatus", "TaskStatus")
                        .WithMany()
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("TaskStatus");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.RegulatorAccreditationTaskStatus", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.Accreditation", "Accreditation")
                        .WithMany("Tasks")
                        .HasForeignKey("AccreditationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.LookupRegulatorTask", "Task")
                        .WithMany()
                        .HasForeignKey("RegulatorTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.LookupTaskStatus", "TaskStatus")
                        .WithMany()
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accreditation");

                    b.Navigation("Task");

                    b.Navigation("TaskStatus");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.RegulatorApplicationTaskStatus", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.RegistrationMaterial", "RegistrationMaterial")
                        .WithMany("Tasks")
                        .HasForeignKey("RegistrationMaterialId");

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.LookupRegulatorTask", "Task")
                        .WithMany()
                        .HasForeignKey("RegulatorTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.LookupTaskStatus", "TaskStatus")
                        .WithMany()
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistrationMaterial");

                    b.Navigation("Task");

                    b.Navigation("TaskStatus");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.RegulatorRegistrationTaskStatus", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.Registration", "Registration")
                        .WithMany("Tasks")
                        .HasForeignKey("RegistrationId");

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.LookupRegulatorTask", "Task")
                        .WithMany()
                        .HasForeignKey("RegulatorTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.LookupTaskStatus", "TaskStatus")
                        .WithMany()
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Registration");

                    b.Navigation("Task");

                    b.Navigation("TaskStatus");
                });

            modelBuilder.Entity("OverseasAddressOverseasMaterialReprocessingSite", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.OverseasAddress", null)
                        .WithMany()
                        .HasForeignKey("OverseasAddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.OverseasMaterialReprocessingSite", null)
                        .WithMany()
                        .HasForeignKey("OverseasMaterialReprocessingSitesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OverseasMaterialReprocessingSiteRegistrationMaterial", b =>
                {
                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.OverseasMaterialReprocessingSite", null)
                        .WithMany()
                        .HasForeignKey("OverseasMaterialReprocessingSitesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.PRN.Backend.Data.DataModels.Registrations.RegistrationMaterial", null)
                        .WithMany()
                        .HasForeignKey("RegistrationMaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Eprn", b =>
                {
                    b.Navigation("PrnStatusHistories");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Material", b =>
                {
                    b.Navigation("PrnMaterialMappings");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.Accreditation", b =>
                {
                    b.Navigation("AccreditationDulyMade");

                    b.Navigation("FileUploads");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.OverseasAddress", b =>
                {
                    b.Navigation("InterimOverseasConnections");

                    b.Navigation("OverseasAddressContacts");

                    b.Navigation("OverseasAddressWasteCodes");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.Registration", b =>
                {
                    b.Navigation("AccreditationTasks");

                    b.Navigation("ApplicantRegistrationTasksStatus");

                    b.Navigation("CarrierBrokerDealerPermit")
                        .IsRequired();

                    b.Navigation("Materials");

                    b.Navigation("OverseasAddresses");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.RegistrationMaterial", b =>
                {
                    b.Navigation("Accreditations");

                    b.Navigation("ApplicantTaskStatuses");

                    b.Navigation("DeterminationDate");

                    b.Navigation("DulyMade");

                    b.Navigation("FileUploads");

                    b.Navigation("MaterialExemptionReferences");

                    b.Navigation("RegistrationMaterialContact");

                    b.Navigation("RegistrationReprocessingIO");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.RegulatorApplicationTaskStatus", b =>
                {
                    b.Navigation("ApplicationTaskStatusQueryNotes");
                });

            modelBuilder.Entity("EPR.PRN.Backend.Data.DataModels.Registrations.RegulatorRegistrationTaskStatus", b =>
                {
                    b.Navigation("RegistrationTaskStatusQueryNotes");
                });
#pragma warning restore 612, 618
        }
    }
}
