// <auto-generated />
using System;
using EPR.Accreditation.API.Common.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EPR.Accreditation.API.Common.Data.Migrations
{
    [DbContext(typeof(AccreditationContext))]
    [Migration("20240325115713_save-and-continue-field-length")]
    partial class saveandcontinuefieldlength
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.Accreditation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccreditationStatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Large")
                        .HasColumnType("bit");

                    b.Property<int>("OperatorTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccreditationStatusId");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("OperatorTypeId");

                    b.HasIndex("ReferenceNumber")
                        .IsUnique()
                        .HasFilter("[ReferenceNumber] IS NOT NULL");

                    b.HasIndex("SiteId");

                    b.ToTable("Accreditation");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.AccreditationMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AnnualCapacity")
                        .HasColumnType("decimal(10,3)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int?>("OverseasReprocessingSiteId")
                        .HasColumnType("int");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<string>("WasteSource")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("WeeklyCapacity")
                        .HasColumnType("decimal(10,3)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("MaterialId");

                    b.HasIndex("OverseasReprocessingSiteId");

                    b.HasIndex("SiteId");

                    b.ToTable("AccreditationMaterial");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.AccreditationTaskProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccreditationId")
                        .HasColumnType("int");

                    b.Property<int>("TaskNameId")
                        .HasColumnType("int");

                    b.Property<int>("TaskStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccreditationId");

                    b.HasIndex("TaskNameId");

                    b.HasIndex("TaskStatusId");

                    b.ToTable("AccreditationTaskProgress");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.AccreditationTaskProgressMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccreditationMaterialId")
                        .HasColumnType("int");

                    b.Property<int>("AccreditationTaskProgressId")
                        .HasColumnType("int");

                    b.Property<int>("TaskStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccreditationMaterialId");

                    b.HasIndex("AccreditationTaskProgressId");

                    b.ToTable("AccreditationTaskProgressMaterial");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.ExemptionReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("ExemptionReference");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.FileUpload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccreditationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FileUploadTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AccreditationId");

                    b.HasIndex("FileUploadTypeId");

                    b.HasIndex("Status");

                    b.ToTable("FileUpload");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.Lookups.AccreditationStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("AccreditationStatus", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "None"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Started"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Submitted"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Accepted"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Queried"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Updated"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Granted"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Refused"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Withdrawn"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Suspended"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Cancelled"
                        });
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.Lookups.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<string>("CountryCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CountryId");

                    b.ToTable("Country", "Lookup");

                    b.HasData(
                        new
                        {
                            CountryId = 4,
                            CountryCode = "AF",
                            Name = "Afghanistan"
                        },
                        new
                        {
                            CountryId = 248,
                            CountryCode = "AX",
                            Name = "Åland Islands"
                        },
                        new
                        {
                            CountryId = 8,
                            CountryCode = "AL",
                            Name = "Albania"
                        },
                        new
                        {
                            CountryId = 12,
                            CountryCode = "DZ",
                            Name = "Algeria"
                        },
                        new
                        {
                            CountryId = 16,
                            CountryCode = "AS",
                            Name = "American Samoa"
                        },
                        new
                        {
                            CountryId = 20,
                            CountryCode = "AD",
                            Name = "Andorra"
                        },
                        new
                        {
                            CountryId = 24,
                            CountryCode = "AO",
                            Name = "Angola"
                        },
                        new
                        {
                            CountryId = 660,
                            CountryCode = "AI",
                            Name = "Anguilla"
                        },
                        new
                        {
                            CountryId = 10,
                            CountryCode = "AQ",
                            Name = "Antarctica"
                        },
                        new
                        {
                            CountryId = 28,
                            CountryCode = "AG",
                            Name = "Antigua and Barbuda"
                        },
                        new
                        {
                            CountryId = 32,
                            CountryCode = "AR",
                            Name = "Argentina"
                        },
                        new
                        {
                            CountryId = 51,
                            CountryCode = "AM",
                            Name = "Armenia"
                        },
                        new
                        {
                            CountryId = 533,
                            CountryCode = "AW",
                            Name = "Aruba"
                        },
                        new
                        {
                            CountryId = 36,
                            CountryCode = "AU",
                            Name = "Australia"
                        },
                        new
                        {
                            CountryId = 40,
                            CountryCode = "AT",
                            Name = "Austria"
                        },
                        new
                        {
                            CountryId = 31,
                            CountryCode = "AZ",
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            CountryId = 44,
                            CountryCode = "BS",
                            Name = "Bahamas"
                        },
                        new
                        {
                            CountryId = 48,
                            CountryCode = "BH",
                            Name = "Bahrain"
                        },
                        new
                        {
                            CountryId = 50,
                            CountryCode = "BD",
                            Name = "Bangladesh"
                        },
                        new
                        {
                            CountryId = 52,
                            CountryCode = "BB",
                            Name = "Barbados"
                        },
                        new
                        {
                            CountryId = 112,
                            CountryCode = "BY",
                            Name = "Belarus"
                        },
                        new
                        {
                            CountryId = 56,
                            CountryCode = "BE",
                            Name = "Belgium"
                        },
                        new
                        {
                            CountryId = 84,
                            CountryCode = "BZ",
                            Name = "Belize"
                        },
                        new
                        {
                            CountryId = 204,
                            CountryCode = "BJ",
                            Name = "Benin"
                        },
                        new
                        {
                            CountryId = 60,
                            CountryCode = "BM",
                            Name = "Bermuda"
                        },
                        new
                        {
                            CountryId = 64,
                            CountryCode = "BT",
                            Name = "Bhutan"
                        },
                        new
                        {
                            CountryId = 68,
                            CountryCode = "BO",
                            Name = "Bolivia (Plurinational State of)"
                        },
                        new
                        {
                            CountryId = 535,
                            CountryCode = "BQ",
                            Name = "Bonaire, Sint Eustatius and Saba"
                        },
                        new
                        {
                            CountryId = 70,
                            CountryCode = "BA",
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            CountryId = 72,
                            CountryCode = "BW",
                            Name = "Botswana"
                        },
                        new
                        {
                            CountryId = 74,
                            CountryCode = "BV",
                            Name = "Bouvet Island"
                        },
                        new
                        {
                            CountryId = 76,
                            CountryCode = "BR",
                            Name = "Brazil"
                        },
                        new
                        {
                            CountryId = 86,
                            CountryCode = "IO",
                            Name = "British Indian Ocean Territory"
                        },
                        new
                        {
                            CountryId = 96,
                            CountryCode = "BN",
                            Name = "Brunei Darussalam"
                        },
                        new
                        {
                            CountryId = 100,
                            CountryCode = "BG",
                            Name = "Bulgaria"
                        },
                        new
                        {
                            CountryId = 854,
                            CountryCode = "BF",
                            Name = "Burkina Faso"
                        },
                        new
                        {
                            CountryId = 108,
                            CountryCode = "BI",
                            Name = "Burundi"
                        },
                        new
                        {
                            CountryId = 132,
                            CountryCode = "CV",
                            Name = "Cabo Verde"
                        },
                        new
                        {
                            CountryId = 116,
                            CountryCode = "KH",
                            Name = "Cambodia"
                        },
                        new
                        {
                            CountryId = 120,
                            CountryCode = "CM",
                            Name = "Cameroon"
                        },
                        new
                        {
                            CountryId = 124,
                            CountryCode = "CA",
                            Name = "Canada"
                        },
                        new
                        {
                            CountryId = 136,
                            CountryCode = "KY",
                            Name = "Cayman Islands"
                        },
                        new
                        {
                            CountryId = 140,
                            CountryCode = "CF",
                            Name = "Central African Republic"
                        },
                        new
                        {
                            CountryId = 148,
                            CountryCode = "TD",
                            Name = "Chad"
                        },
                        new
                        {
                            CountryId = 152,
                            CountryCode = "CL",
                            Name = "Chile"
                        },
                        new
                        {
                            CountryId = 156,
                            CountryCode = "CN",
                            Name = "China"
                        },
                        new
                        {
                            CountryId = 162,
                            CountryCode = "CX",
                            Name = "Christmas Island"
                        },
                        new
                        {
                            CountryId = 166,
                            CountryCode = "CC",
                            Name = "Cocos (Keeling) Islands"
                        },
                        new
                        {
                            CountryId = 170,
                            CountryCode = "CO",
                            Name = "Colombia"
                        },
                        new
                        {
                            CountryId = 174,
                            CountryCode = "KM",
                            Name = "Comoros"
                        },
                        new
                        {
                            CountryId = 178,
                            CountryCode = "CG",
                            Name = "Congo"
                        },
                        new
                        {
                            CountryId = 180,
                            CountryCode = "CD",
                            Name = "Congo (Democratic Republic of the)"
                        },
                        new
                        {
                            CountryId = 184,
                            CountryCode = "CK",
                            Name = "Cook Islands"
                        },
                        new
                        {
                            CountryId = 188,
                            CountryCode = "CR",
                            Name = "Costa Rica"
                        },
                        new
                        {
                            CountryId = 384,
                            CountryCode = "CI",
                            Name = "Côte d'Ivoire"
                        },
                        new
                        {
                            CountryId = 191,
                            CountryCode = "HR",
                            Name = "Croatia"
                        },
                        new
                        {
                            CountryId = 192,
                            CountryCode = "CU",
                            Name = "Cuba"
                        },
                        new
                        {
                            CountryId = 531,
                            CountryCode = "CW",
                            Name = "Curaçao"
                        },
                        new
                        {
                            CountryId = 196,
                            CountryCode = "CY",
                            Name = "Cyprus"
                        },
                        new
                        {
                            CountryId = 203,
                            CountryCode = "CZ",
                            Name = "Czech Republic"
                        },
                        new
                        {
                            CountryId = 208,
                            CountryCode = "DK",
                            Name = "Denmark"
                        },
                        new
                        {
                            CountryId = 262,
                            CountryCode = "DJ",
                            Name = "Djibouti"
                        },
                        new
                        {
                            CountryId = 212,
                            CountryCode = "DM",
                            Name = "Dominica"
                        },
                        new
                        {
                            CountryId = 214,
                            CountryCode = "DO",
                            Name = "Dominican Republic"
                        },
                        new
                        {
                            CountryId = 218,
                            CountryCode = "EC",
                            Name = "Ecuador"
                        },
                        new
                        {
                            CountryId = 818,
                            CountryCode = "EG",
                            Name = "Egypt"
                        },
                        new
                        {
                            CountryId = 222,
                            CountryCode = "SV",
                            Name = "El Salvador"
                        },
                        new
                        {
                            CountryId = 226,
                            CountryCode = "GQ",
                            Name = "Equatorial Guinea"
                        },
                        new
                        {
                            CountryId = 232,
                            CountryCode = "ER",
                            Name = "Eritrea"
                        },
                        new
                        {
                            CountryId = 233,
                            CountryCode = "EE",
                            Name = "Estonia"
                        },
                        new
                        {
                            CountryId = 231,
                            CountryCode = "ET",
                            Name = "Ethiopia"
                        },
                        new
                        {
                            CountryId = 238,
                            CountryCode = "FK",
                            Name = "Falkland Islands (Malvinas)"
                        },
                        new
                        {
                            CountryId = 234,
                            CountryCode = "FO",
                            Name = "Faroe Islands"
                        },
                        new
                        {
                            CountryId = 242,
                            CountryCode = "FJ",
                            Name = "Fiji"
                        },
                        new
                        {
                            CountryId = 246,
                            CountryCode = "FI",
                            Name = "Finland"
                        },
                        new
                        {
                            CountryId = 250,
                            CountryCode = "FR",
                            Name = "France"
                        },
                        new
                        {
                            CountryId = 254,
                            CountryCode = "GF",
                            Name = "French Guiana"
                        },
                        new
                        {
                            CountryId = 258,
                            CountryCode = "PF",
                            Name = "French Polynesia"
                        },
                        new
                        {
                            CountryId = 260,
                            CountryCode = "TF",
                            Name = "French Southern Territories"
                        },
                        new
                        {
                            CountryId = 266,
                            CountryCode = "GA",
                            Name = "Gabon"
                        },
                        new
                        {
                            CountryId = 270,
                            CountryCode = "GM",
                            Name = "Gambia"
                        },
                        new
                        {
                            CountryId = 268,
                            CountryCode = "GE",
                            Name = "Georgia"
                        },
                        new
                        {
                            CountryId = 276,
                            CountryCode = "DE",
                            Name = "Germany"
                        },
                        new
                        {
                            CountryId = 288,
                            CountryCode = "GH",
                            Name = "Ghana"
                        },
                        new
                        {
                            CountryId = 292,
                            CountryCode = "GI",
                            Name = "Gibraltar"
                        },
                        new
                        {
                            CountryId = 300,
                            CountryCode = "GR",
                            Name = "Greece"
                        },
                        new
                        {
                            CountryId = 304,
                            CountryCode = "GL",
                            Name = "Greenland"
                        },
                        new
                        {
                            CountryId = 308,
                            CountryCode = "GD",
                            Name = "Grenada"
                        },
                        new
                        {
                            CountryId = 312,
                            CountryCode = "GP",
                            Name = "Guadeloupe"
                        },
                        new
                        {
                            CountryId = 316,
                            CountryCode = "GU",
                            Name = "Guam"
                        },
                        new
                        {
                            CountryId = 320,
                            CountryCode = "GT",
                            Name = "Guatemala"
                        },
                        new
                        {
                            CountryId = 831,
                            CountryCode = "GG",
                            Name = "Guernsey"
                        },
                        new
                        {
                            CountryId = 324,
                            CountryCode = "GN",
                            Name = "Guinea"
                        },
                        new
                        {
                            CountryId = 624,
                            CountryCode = "GW",
                            Name = "Guinea-Bissau"
                        },
                        new
                        {
                            CountryId = 328,
                            CountryCode = "GY",
                            Name = "Guyana"
                        },
                        new
                        {
                            CountryId = 332,
                            CountryCode = "HT",
                            Name = "Haiti"
                        },
                        new
                        {
                            CountryId = 334,
                            CountryCode = "HM",
                            Name = "Heard Island and McDonald Islands"
                        },
                        new
                        {
                            CountryId = 336,
                            CountryCode = "VA",
                            Name = "Holy See"
                        },
                        new
                        {
                            CountryId = 340,
                            CountryCode = "HN",
                            Name = "Honduras"
                        },
                        new
                        {
                            CountryId = 344,
                            CountryCode = "HK",
                            Name = "Hong Kong"
                        },
                        new
                        {
                            CountryId = 348,
                            CountryCode = "HU",
                            Name = "Hungary"
                        },
                        new
                        {
                            CountryId = 352,
                            CountryCode = "IS",
                            Name = "Iceland"
                        },
                        new
                        {
                            CountryId = 356,
                            CountryCode = "IN",
                            Name = "India"
                        },
                        new
                        {
                            CountryId = 360,
                            CountryCode = "ID",
                            Name = "Indonesia"
                        },
                        new
                        {
                            CountryId = 364,
                            CountryCode = "IR",
                            Name = "Iran (Islamic Republic of)"
                        },
                        new
                        {
                            CountryId = 368,
                            CountryCode = "IQ",
                            Name = "Iraq"
                        },
                        new
                        {
                            CountryId = 372,
                            CountryCode = "IE",
                            Name = "Ireland"
                        },
                        new
                        {
                            CountryId = 833,
                            CountryCode = "IM",
                            Name = "Isle of Man"
                        },
                        new
                        {
                            CountryId = 376,
                            CountryCode = "IL",
                            Name = "Israel"
                        },
                        new
                        {
                            CountryId = 380,
                            CountryCode = "IT",
                            Name = "Italy"
                        },
                        new
                        {
                            CountryId = 388,
                            CountryCode = "JM",
                            Name = "Jamaica"
                        },
                        new
                        {
                            CountryId = 392,
                            CountryCode = "JP",
                            Name = "Japan"
                        },
                        new
                        {
                            CountryId = 832,
                            CountryCode = "JE",
                            Name = "Jersey"
                        },
                        new
                        {
                            CountryId = 400,
                            CountryCode = "JO",
                            Name = "Jordan"
                        },
                        new
                        {
                            CountryId = 398,
                            CountryCode = "KZ",
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            CountryId = 404,
                            CountryCode = "KE",
                            Name = "Kenya"
                        },
                        new
                        {
                            CountryId = 296,
                            CountryCode = "KI",
                            Name = "Kiribati"
                        },
                        new
                        {
                            CountryId = 408,
                            CountryCode = "KP",
                            Name = "Korea (Democratic People's Republic of)"
                        },
                        new
                        {
                            CountryId = 410,
                            CountryCode = "KR",
                            Name = "Korea (Republic of)"
                        },
                        new
                        {
                            CountryId = 414,
                            CountryCode = "KW",
                            Name = "Kuwait"
                        },
                        new
                        {
                            CountryId = 417,
                            CountryCode = "KG",
                            Name = "Kyrgyzstan"
                        },
                        new
                        {
                            CountryId = 418,
                            CountryCode = "LA",
                            Name = "Lao People's Democratic Republic"
                        },
                        new
                        {
                            CountryId = 428,
                            CountryCode = "LV",
                            Name = "Latvia"
                        },
                        new
                        {
                            CountryId = 422,
                            CountryCode = "LB",
                            Name = "Lebanon"
                        },
                        new
                        {
                            CountryId = 426,
                            CountryCode = "LS",
                            Name = "Lesotho"
                        },
                        new
                        {
                            CountryId = 430,
                            CountryCode = "LR",
                            Name = "Liberia"
                        },
                        new
                        {
                            CountryId = 434,
                            CountryCode = "LY",
                            Name = "Libya"
                        },
                        new
                        {
                            CountryId = 438,
                            CountryCode = "LI",
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            CountryId = 440,
                            CountryCode = "LT",
                            Name = "Lithuania"
                        },
                        new
                        {
                            CountryId = 442,
                            CountryCode = "LU",
                            Name = "Luxembourg"
                        },
                        new
                        {
                            CountryId = 446,
                            CountryCode = "MO",
                            Name = "Macao"
                        },
                        new
                        {
                            CountryId = 807,
                            CountryCode = "MK",
                            Name = "Macedonia (the former Yugoslav Republic of)"
                        },
                        new
                        {
                            CountryId = 450,
                            CountryCode = "MG",
                            Name = "Madagascar"
                        },
                        new
                        {
                            CountryId = 454,
                            CountryCode = "MW",
                            Name = "Malawi"
                        },
                        new
                        {
                            CountryId = 458,
                            CountryCode = "MY",
                            Name = "Malaysia"
                        },
                        new
                        {
                            CountryId = 462,
                            CountryCode = "MV",
                            Name = "Maldives"
                        },
                        new
                        {
                            CountryId = 466,
                            CountryCode = "ML",
                            Name = "Mali"
                        },
                        new
                        {
                            CountryId = 470,
                            CountryCode = "MT",
                            Name = "Malta"
                        },
                        new
                        {
                            CountryId = 584,
                            CountryCode = "MH",
                            Name = "Marshall Islands"
                        },
                        new
                        {
                            CountryId = 474,
                            CountryCode = "MQ",
                            Name = "Martinique"
                        },
                        new
                        {
                            CountryId = 478,
                            CountryCode = "MR",
                            Name = "Mauritania"
                        },
                        new
                        {
                            CountryId = 480,
                            CountryCode = "MU",
                            Name = "Mauritius"
                        },
                        new
                        {
                            CountryId = 175,
                            CountryCode = "YT",
                            Name = "Mayotte"
                        },
                        new
                        {
                            CountryId = 484,
                            CountryCode = "MX",
                            Name = "Mexico"
                        },
                        new
                        {
                            CountryId = 583,
                            CountryCode = "FM",
                            Name = "Micronesia (Federated States of)"
                        },
                        new
                        {
                            CountryId = 498,
                            CountryCode = "MC",
                            Name = "Monaco"
                        },
                        new
                        {
                            CountryId = 492,
                            CountryCode = "MN",
                            Name = "Mongolia"
                        },
                        new
                        {
                            CountryId = 499,
                            CountryCode = "ME",
                            Name = "Montenegro"
                        },
                        new
                        {
                            CountryId = 500,
                            CountryCode = "MS",
                            Name = "Montserrat"
                        },
                        new
                        {
                            CountryId = 504,
                            CountryCode = "MA",
                            Name = "Morocco"
                        },
                        new
                        {
                            CountryId = 508,
                            CountryCode = "MZ",
                            Name = "Mozambique"
                        },
                        new
                        {
                            CountryId = 104,
                            CountryCode = "MM",
                            Name = "Myanmar"
                        },
                        new
                        {
                            CountryId = 516,
                            CountryCode = "NA",
                            Name = "Namibia"
                        },
                        new
                        {
                            CountryId = 520,
                            CountryCode = "NR",
                            Name = "Nauru"
                        },
                        new
                        {
                            CountryId = 524,
                            CountryCode = "NP",
                            Name = "Nepal"
                        },
                        new
                        {
                            CountryId = 528,
                            CountryCode = "NL",
                            Name = "Netherlands"
                        },
                        new
                        {
                            CountryId = 540,
                            CountryCode = "NC",
                            Name = "New Caledonia"
                        },
                        new
                        {
                            CountryId = 554,
                            CountryCode = "NZ",
                            Name = "New Zealand"
                        },
                        new
                        {
                            CountryId = 558,
                            CountryCode = "NI",
                            Name = "Nicaragua"
                        },
                        new
                        {
                            CountryId = 562,
                            CountryCode = "NE",
                            Name = "Niger"
                        },
                        new
                        {
                            CountryId = 566,
                            CountryCode = "NG",
                            Name = "Nigeria"
                        },
                        new
                        {
                            CountryId = 570,
                            CountryCode = "NU",
                            Name = "Niue"
                        },
                        new
                        {
                            CountryId = 574,
                            CountryCode = "NF",
                            Name = "Norfolk Island"
                        },
                        new
                        {
                            CountryId = 580,
                            CountryCode = "MP",
                            Name = "Northern Mariana Islands"
                        },
                        new
                        {
                            CountryId = 578,
                            CountryCode = "NO",
                            Name = "Norway"
                        },
                        new
                        {
                            CountryId = 512,
                            CountryCode = "OM",
                            Name = "Oman"
                        },
                        new
                        {
                            CountryId = 586,
                            CountryCode = "PK",
                            Name = "Pakistan"
                        },
                        new
                        {
                            CountryId = 585,
                            CountryCode = "PW",
                            Name = "Palau"
                        },
                        new
                        {
                            CountryId = 275,
                            CountryCode = "PS",
                            Name = "Palestine, State of"
                        },
                        new
                        {
                            CountryId = 591,
                            CountryCode = "PA",
                            Name = "Panama"
                        },
                        new
                        {
                            CountryId = 598,
                            CountryCode = "PG",
                            Name = "Papua New Guinea"
                        },
                        new
                        {
                            CountryId = 600,
                            CountryCode = "PY",
                            Name = "Paraguay"
                        },
                        new
                        {
                            CountryId = 604,
                            CountryCode = "PE",
                            Name = "Peru"
                        },
                        new
                        {
                            CountryId = 608,
                            CountryCode = "PH",
                            Name = "Philippines"
                        },
                        new
                        {
                            CountryId = 612,
                            CountryCode = "PN",
                            Name = "Pitcairn"
                        },
                        new
                        {
                            CountryId = 616,
                            CountryCode = "PL",
                            Name = "Poland"
                        },
                        new
                        {
                            CountryId = 620,
                            CountryCode = "PT",
                            Name = "Portugal"
                        },
                        new
                        {
                            CountryId = 630,
                            CountryCode = "PR",
                            Name = "Puerto Rico"
                        },
                        new
                        {
                            CountryId = 634,
                            CountryCode = "QA",
                            Name = "Qatar"
                        },
                        new
                        {
                            CountryId = 638,
                            CountryCode = "RE",
                            Name = "Réunion"
                        },
                        new
                        {
                            CountryId = 642,
                            CountryCode = "RO",
                            Name = "Romania"
                        },
                        new
                        {
                            CountryId = 643,
                            CountryCode = "RU",
                            Name = "Russian Federation"
                        },
                        new
                        {
                            CountryId = 646,
                            CountryCode = "RW",
                            Name = "Rwanda"
                        },
                        new
                        {
                            CountryId = 652,
                            CountryCode = "BL",
                            Name = "Saint Barthélemy"
                        },
                        new
                        {
                            CountryId = 654,
                            CountryCode = "SH",
                            Name = "Saint Helena, Ascension and Tristan da Cunha"
                        },
                        new
                        {
                            CountryId = 659,
                            CountryCode = "KN",
                            Name = "Saint Kitts and Nevis"
                        },
                        new
                        {
                            CountryId = 662,
                            CountryCode = "LC",
                            Name = "Saint Lucia"
                        },
                        new
                        {
                            CountryId = 663,
                            CountryCode = "MF",
                            Name = "Saint Martin (French part)"
                        },
                        new
                        {
                            CountryId = 666,
                            CountryCode = "PM",
                            Name = "Saint Pierre and Miquelon"
                        },
                        new
                        {
                            CountryId = 670,
                            CountryCode = "VC",
                            Name = "Saint Vincent and the Grenadines"
                        },
                        new
                        {
                            CountryId = 882,
                            CountryCode = "WS",
                            Name = "Samoa"
                        },
                        new
                        {
                            CountryId = 674,
                            CountryCode = "SM",
                            Name = "San Marino"
                        },
                        new
                        {
                            CountryId = 678,
                            CountryCode = "ST",
                            Name = "Sao Tome and Principe"
                        },
                        new
                        {
                            CountryId = 682,
                            CountryCode = "SA",
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            CountryId = 686,
                            CountryCode = "SN",
                            Name = "Senegal"
                        },
                        new
                        {
                            CountryId = 688,
                            CountryCode = "RS",
                            Name = "Serbia"
                        },
                        new
                        {
                            CountryId = 690,
                            CountryCode = "SC",
                            Name = "Seychelles"
                        },
                        new
                        {
                            CountryId = 694,
                            CountryCode = "SL",
                            Name = "Sierra Leone"
                        },
                        new
                        {
                            CountryId = 702,
                            CountryCode = "SG",
                            Name = "Singapore"
                        },
                        new
                        {
                            CountryId = 534,
                            CountryCode = "SX",
                            Name = "Sint Maarten (Dutch part)"
                        },
                        new
                        {
                            CountryId = 703,
                            CountryCode = "SK",
                            Name = "Slovakia"
                        },
                        new
                        {
                            CountryId = 705,
                            CountryCode = "SI",
                            Name = "Slovenia"
                        },
                        new
                        {
                            CountryId = 90,
                            CountryCode = "SB",
                            Name = "Solomon Islands"
                        },
                        new
                        {
                            CountryId = 706,
                            CountryCode = "SO",
                            Name = "Somalia"
                        },
                        new
                        {
                            CountryId = 710,
                            CountryCode = "ZA",
                            Name = "South Africa"
                        },
                        new
                        {
                            CountryId = 239,
                            CountryCode = "GS",
                            Name = "South Georgia and the South Sandwich Islands"
                        },
                        new
                        {
                            CountryId = 728,
                            CountryCode = "SS",
                            Name = "South Sudan"
                        },
                        new
                        {
                            CountryId = 724,
                            CountryCode = "ES",
                            Name = "Spain"
                        },
                        new
                        {
                            CountryId = 144,
                            CountryCode = "LK",
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            CountryId = 729,
                            CountryCode = "SD",
                            Name = "Sudan"
                        },
                        new
                        {
                            CountryId = 740,
                            CountryCode = "SR",
                            Name = "Suriname"
                        },
                        new
                        {
                            CountryId = 744,
                            CountryCode = "SJ",
                            Name = "Svalbard and Jan Mayen"
                        },
                        new
                        {
                            CountryId = 748,
                            CountryCode = "SZ",
                            Name = "Swaziland"
                        },
                        new
                        {
                            CountryId = 752,
                            CountryCode = "SE",
                            Name = "Sweden"
                        },
                        new
                        {
                            CountryId = 756,
                            CountryCode = "CH",
                            Name = "Switzerland"
                        },
                        new
                        {
                            CountryId = 760,
                            CountryCode = "SY",
                            Name = "Syrian Arab Republic"
                        },
                        new
                        {
                            CountryId = 158,
                            CountryCode = "TW",
                            Name = "Taiwan, Province of China"
                        },
                        new
                        {
                            CountryId = 762,
                            CountryCode = "TJ",
                            Name = "Tajikistan"
                        },
                        new
                        {
                            CountryId = 834,
                            CountryCode = "TZ",
                            Name = "Tanzania, United Republic of"
                        },
                        new
                        {
                            CountryId = 764,
                            CountryCode = "TH",
                            Name = "Thailand"
                        },
                        new
                        {
                            CountryId = 626,
                            CountryCode = "TL",
                            Name = "Timor-Leste"
                        },
                        new
                        {
                            CountryId = 768,
                            CountryCode = "TG",
                            Name = "Togo"
                        },
                        new
                        {
                            CountryId = 772,
                            CountryCode = "TK",
                            Name = "Tokelau"
                        },
                        new
                        {
                            CountryId = 776,
                            CountryCode = "TO",
                            Name = "Tonga"
                        },
                        new
                        {
                            CountryId = 780,
                            CountryCode = "TT",
                            Name = "Trinidad and Tobago"
                        },
                        new
                        {
                            CountryId = 788,
                            CountryCode = "TN",
                            Name = "Tunisia"
                        },
                        new
                        {
                            CountryId = 792,
                            CountryCode = "TR",
                            Name = "Turkey"
                        },
                        new
                        {
                            CountryId = 795,
                            CountryCode = "TM",
                            Name = "Turkmenistan"
                        },
                        new
                        {
                            CountryId = 796,
                            CountryCode = "TC",
                            Name = "Turks and Caicos Islands"
                        },
                        new
                        {
                            CountryId = 798,
                            CountryCode = "TV",
                            Name = "Tuvalu"
                        },
                        new
                        {
                            CountryId = 800,
                            CountryCode = "UG",
                            Name = "Uganda"
                        },
                        new
                        {
                            CountryId = 804,
                            CountryCode = "UA",
                            Name = "Ukraine"
                        },
                        new
                        {
                            CountryId = 784,
                            CountryCode = "AE",
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            CountryId = 826,
                            CountryCode = "GB",
                            Name = "United Kingdom of Great Britain and Northern Ireland"
                        },
                        new
                        {
                            CountryId = 840,
                            CountryCode = "US",
                            Name = "United States of America"
                        },
                        new
                        {
                            CountryId = 581,
                            CountryCode = "UM",
                            Name = "United States Minor Outlying Islands"
                        },
                        new
                        {
                            CountryId = 858,
                            CountryCode = "UY",
                            Name = "Uruguay"
                        },
                        new
                        {
                            CountryId = 860,
                            CountryCode = "UZ",
                            Name = "Uzbekistan"
                        },
                        new
                        {
                            CountryId = 548,
                            CountryCode = "VU",
                            Name = "Vanuatu"
                        },
                        new
                        {
                            CountryId = 862,
                            CountryCode = "VE",
                            Name = "Venezuela (Bolivarian Republic of)"
                        },
                        new
                        {
                            CountryId = 704,
                            CountryCode = "VN",
                            Name = "Viet Nam"
                        },
                        new
                        {
                            CountryId = 92,
                            CountryCode = "VG",
                            Name = "Virgin Islands (British)"
                        },
                        new
                        {
                            CountryId = 850,
                            CountryCode = "VI",
                            Name = "Virgin Islands (U.S.)"
                        },
                        new
                        {
                            CountryId = 876,
                            CountryCode = "WF",
                            Name = "Wallis and Futuna"
                        },
                        new
                        {
                            CountryId = 732,
                            CountryCode = "EH",
                            Name = "Western Sahara"
                        },
                        new
                        {
                            CountryId = 887,
                            CountryCode = "YE",
                            Name = "Yemen"
                        },
                        new
                        {
                            CountryId = 894,
                            CountryCode = "ZM",
                            Name = "Zambia"
                        },
                        new
                        {
                            CountryId = 716,
                            CountryCode = "ZW",
                            Name = "Zimbabwe"
                        });
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.Lookups.FileUploadStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("FileUploadStatus", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Undefined"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Virus check success"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Upload complete"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Virus check failed"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Upload failed"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Deleted"
                        });
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.Lookups.FileUploadType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("FileUploadType", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Undefined"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Business plan"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Recording system"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sampling plan"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Broadly eviquivalent evidence"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Flow diagram"
                        });
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.Lookups.OperatorType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.ToTable("OperatorType", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Reprocessor"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Exporter"
                        });
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.Lookups.ReprocessorSupportingInformationType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("ReprocessorSupportingInformationType", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Undefined"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Non waste inputs"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Products produced last year"
                        });
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.Lookups.TaskName", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("TaskName", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Undefined"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Waste licence and PRNs"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Upload a business plan"
                        },
                        new
                        {
                            Id = 3,
                            Name = "About the material"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Upload supporting documents"
                        });
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.Lookups.TaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("TaskStatus", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Undefined"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Not started"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Started"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cannot start yet"
                        });
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.Lookups.WasteCodeType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("WasteCodeType", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Undefined"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Waste description code"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Material commodity code"
                        });
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("English")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Welsh")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.MaterialReprocessorDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccreditationMaterialId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Contaminents")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("MaterialsNotProcessedOnSite")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("NonPackagingWaste")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("NonUkPackagingWaste")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("ProcessLoss")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("UkPackagingWaste")
                        .HasColumnType("decimal(10,3)");

                    b.Property<bool>("WasteLastYear")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccreditationMaterialId")
                        .IsUnique();

                    b.ToTable("MaterialReprocessorDetails");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.OverseasAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("OverseasAddress");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.OverseasAgent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fullname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OverseasAddressId")
                        .HasColumnType("int");

                    b.Property<int>("OverseasReprocessingSiteId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telephone")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("OverseasAddressId")
                        .IsUnique();

                    b.HasIndex("OverseasReprocessingSiteId")
                        .IsUnique();

                    b.ToTable("OverseasAgent");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.OverseasReprocessingSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccreditationId")
                        .HasColumnType("int");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Outputs")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("OverseasAddressId")
                        .HasColumnType("int");

                    b.Property<string>("RejectedPlans")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UkPorts")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("AccreditationId");

                    b.HasIndex("OverseasAddressId")
                        .IsUnique()
                        .HasFilter("[OverseasAddressId] IS NOT NULL");

                    b.ToTable("OverseasReprocessingSite");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.ReprocessorSupportingInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MaterialReprocessorDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("ReprocessorSupportingInformationTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Tonnes")
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialReprocessorDetailsId");

                    b.HasIndex("ReprocessorSupportingInformationTypeId");

                    b.ToTable("ReprocessorSupportingInformation");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.SaveAndComeBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccreditationId")
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Area")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Controller")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Parameters")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccreditationId")
                        .IsUnique();

                    b.ToTable("SaveAndComeBack");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("County")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("Postcode", "OrganisationId")
                        .IsUnique();

                    b.ToTable("Site");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.SiteAuthority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("SiteAuthority");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.WasteCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccreditationMaterialId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("WasteCodeTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccreditationMaterialId");

                    b.HasIndex("WasteCodeTypeId");

                    b.ToTable("WasteCodes");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.WastePermit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccreditationId")
                        .HasColumnType("int");

                    b.Property<string>("DealerRegistrationNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DischargeConsentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EnvironmentalPermitNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OverseasReprocessingSiteId")
                        .HasColumnType("int");

                    b.Property<string>("PartAActivityReferenceNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PartBActivityReferenceNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool?>("WastePermitExemption")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccreditationId")
                        .IsUnique();

                    b.HasIndex("OverseasReprocessingSiteId")
                        .IsUnique()
                        .HasFilter("[OverseasReprocessingSiteId] IS NOT NULL");

                    b.ToTable("WastePermit");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.Accreditation", b =>
                {
                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.Lookups.AccreditationStatus", "AccreditationStatus")
                        .WithMany("Accreditations")
                        .HasForeignKey("AccreditationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.Lookups.OperatorType", "OperatorType")
                        .WithMany("Accreditations")
                        .HasForeignKey("OperatorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.Site", "Site")
                        .WithMany("Accreditations")
                        .HasForeignKey("SiteId");

                    b.Navigation("AccreditationStatus");

                    b.Navigation("OperatorType");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.AccreditationMaterial", b =>
                {
                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.Material", "Material")
                        .WithMany("AccreditationMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.OverseasReprocessingSite", "OverseasReprocessingSite")
                        .WithMany("AccreditationMaterials")
                        .HasForeignKey("OverseasReprocessingSiteId");

                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.Site", "Site")
                        .WithMany("AccreditationMaterials")
                        .HasForeignKey("SiteId");

                    b.Navigation("Material");

                    b.Navigation("OverseasReprocessingSite");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.AccreditationTaskProgress", b =>
                {
                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.Accreditation", "Accreditation")
                        .WithMany("TaskProgress")
                        .HasForeignKey("AccreditationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.Lookups.TaskName", "TaskName")
                        .WithMany("TaskProgress")
                        .HasForeignKey("TaskNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.Lookups.TaskStatus", "TaskStatus")
                        .WithMany("TaskProgress")
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accreditation");

                    b.Navigation("TaskName");

                    b.Navigation("TaskStatus");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.AccreditationTaskProgressMaterial", b =>
                {
                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.AccreditationMaterial", "AccreditationMaterial")
                        .WithMany("AccreditationTaskProgressMaterials")
                        .HasForeignKey("AccreditationMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.AccreditationTaskProgress", "AccreditationTaskProgress")
                        .WithMany("AccreditationTaskProgressMaterials")
                        .HasForeignKey("AccreditationTaskProgressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccreditationMaterial");

                    b.Navigation("AccreditationTaskProgress");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.ExemptionReference", b =>
                {
                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.Site", "Site")
                        .WithMany("ExemptionReferences")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.FileUpload", b =>
                {
                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.Accreditation", "Accreditation")
                        .WithMany("FileUploads")
                        .HasForeignKey("AccreditationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.Lookups.FileUploadType", "FileUploadType")
                        .WithMany("FileUploads")
                        .HasForeignKey("FileUploadTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.Lookups.FileUploadStatus", "FileUploadStatus")
                        .WithMany("FileUploads")
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accreditation");

                    b.Navigation("FileUploadStatus");

                    b.Navigation("FileUploadType");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.MaterialReprocessorDetails", b =>
                {
                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.AccreditationMaterial", null)
                        .WithOne("MaterialReprocessorDetails")
                        .HasForeignKey("EPR.Accreditation.API.Common.Data.DataModels.MaterialReprocessorDetails", "AccreditationMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.OverseasAddress", b =>
                {
                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.Lookups.Country", "Country")
                        .WithMany("OverseasAddresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.OverseasAgent", b =>
                {
                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.OverseasAddress", "OverseasAddress")
                        .WithOne("OverseasAgent")
                        .HasForeignKey("EPR.Accreditation.API.Common.Data.DataModels.OverseasAgent", "OverseasAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.OverseasReprocessingSite", "OverseasReprocessingSite")
                        .WithOne("OverseasAgent")
                        .HasForeignKey("EPR.Accreditation.API.Common.Data.DataModels.OverseasAgent", "OverseasReprocessingSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OverseasAddress");

                    b.Navigation("OverseasReprocessingSite");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.OverseasReprocessingSite", b =>
                {
                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.Accreditation", "Accreditation")
                        .WithMany("OverseasReprocessingSites")
                        .HasForeignKey("AccreditationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.OverseasAddress", "OverseasAddress")
                        .WithOne("OverseasReprocessingSite")
                        .HasForeignKey("EPR.Accreditation.API.Common.Data.DataModels.OverseasReprocessingSite", "OverseasAddressId");

                    b.Navigation("Accreditation");

                    b.Navigation("OverseasAddress");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.ReprocessorSupportingInformation", b =>
                {
                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.MaterialReprocessorDetails", "MaterialReprocessorDetails")
                        .WithMany("ReprocessorSupportingInformation")
                        .HasForeignKey("MaterialReprocessorDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.Lookups.ReprocessorSupportingInformationType", "ReprocessorSupportingInformationType")
                        .WithMany("ReprocessorSupportingInformations")
                        .HasForeignKey("ReprocessorSupportingInformationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialReprocessorDetails");

                    b.Navigation("ReprocessorSupportingInformationType");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.SaveAndComeBack", b =>
                {
                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.Accreditation", "Accreditation")
                        .WithMany()
                        .HasForeignKey("AccreditationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accreditation");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.SiteAuthority", b =>
                {
                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.Site", "Site")
                        .WithMany("SiteAuthorities")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.WasteCode", b =>
                {
                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.AccreditationMaterial", "AccreditationMaterial")
                        .WithMany("WasteCodes")
                        .HasForeignKey("AccreditationMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.Lookups.WasteCodeType", "WasteCodeType")
                        .WithMany("WasteCodes")
                        .HasForeignKey("WasteCodeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccreditationMaterial");

                    b.Navigation("WasteCodeType");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.WastePermit", b =>
                {
                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.Accreditation", "Accreditation")
                        .WithOne("WastePermit")
                        .HasForeignKey("EPR.Accreditation.API.Common.Data.DataModels.WastePermit", "AccreditationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.Accreditation.API.Common.Data.DataModels.OverseasReprocessingSite", "OverseasReprocessingSite")
                        .WithOne("WastePermit")
                        .HasForeignKey("EPR.Accreditation.API.Common.Data.DataModels.WastePermit", "OverseasReprocessingSiteId");

                    b.Navigation("Accreditation");

                    b.Navigation("OverseasReprocessingSite");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.Accreditation", b =>
                {
                    b.Navigation("FileUploads");

                    b.Navigation("OverseasReprocessingSites");

                    b.Navigation("TaskProgress");

                    b.Navigation("WastePermit");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.AccreditationMaterial", b =>
                {
                    b.Navigation("AccreditationTaskProgressMaterials");

                    b.Navigation("MaterialReprocessorDetails");

                    b.Navigation("WasteCodes");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.AccreditationTaskProgress", b =>
                {
                    b.Navigation("AccreditationTaskProgressMaterials");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.Lookups.AccreditationStatus", b =>
                {
                    b.Navigation("Accreditations");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.Lookups.Country", b =>
                {
                    b.Navigation("OverseasAddresses");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.Lookups.FileUploadStatus", b =>
                {
                    b.Navigation("FileUploads");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.Lookups.FileUploadType", b =>
                {
                    b.Navigation("FileUploads");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.Lookups.OperatorType", b =>
                {
                    b.Navigation("Accreditations");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.Lookups.ReprocessorSupportingInformationType", b =>
                {
                    b.Navigation("ReprocessorSupportingInformations");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.Lookups.TaskName", b =>
                {
                    b.Navigation("TaskProgress");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.Lookups.TaskStatus", b =>
                {
                    b.Navigation("TaskProgress");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.Lookups.WasteCodeType", b =>
                {
                    b.Navigation("WasteCodes");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.Material", b =>
                {
                    b.Navigation("AccreditationMaterials");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.MaterialReprocessorDetails", b =>
                {
                    b.Navigation("ReprocessorSupportingInformation");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.OverseasAddress", b =>
                {
                    b.Navigation("OverseasAgent");

                    b.Navigation("OverseasReprocessingSite");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.OverseasReprocessingSite", b =>
                {
                    b.Navigation("AccreditationMaterials");

                    b.Navigation("OverseasAgent");

                    b.Navigation("WastePermit");
                });

            modelBuilder.Entity("EPR.Accreditation.API.Common.Data.DataModels.Site", b =>
                {
                    b.Navigation("AccreditationMaterials");

                    b.Navigation("Accreditations");

                    b.Navigation("ExemptionReferences");

                    b.Navigation("SiteAuthorities");
                });
#pragma warning restore 612, 618
        }
    }
}
